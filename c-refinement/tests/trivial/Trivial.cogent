-- Core expressions:
-- Tested (somewhat):
--    Var, Fun, App, Cast, Let, Con, Case, Esac, Promote
--    Struct, Take unboxed, Member unboxed, Put unboxed
--    Unit
--    AFun
--    Lit (U8)
--    Prim
--    If
--    Member boxed, Put boxed, Take boxed,
--
-- Not tested:
--    Letbang,
--
-- Not applicable, as not used by compiler?
--    Tuple, Split
--
-- Not applicable, as not supported by C parser:
--    SLit (string literal)

id : U8 -> U8
id x = x

fun_call : U8 -> U8
fun_call x = id x


cast_u8_16 : U8 -> U16
cast_u8_16 x = upcast x


cast_u8_16_id : U8 -> U16
cast_u8_16_id x = upcast (id x)


mk_record : {field : U8} -> {field : U8}
mk_record x = x


con_variant : U8 -> < Success (U8) >
con_variant x = Success x


con_variant_2opt : U8 -> < Success (U8) | Error () >
con_variant_2opt x = Success x


con_variant_nested : U8 -> < Colour < Red U8 | Green U8 | Blue U8 > >
con_variant_nested x = Colour (Red x)


con_case : U8 -> U8
con_case x =
  con_variant_2opt x
  | Success _ -> x
  | _ -> x

con_esac : U8 -> U8
con_esac x =
  con_variant x
  | Success _ -> x


-- this is actually a 'Struct'
struct_tuple : U8 -> (U8, U8)
struct_tuple x = (x,x)

struct_record : U8 -> #{b : U8, a : (), d : U8}
struct_record x = #{b = x, a = (), d = x}

-- this is 'Take'
take_tup : (U8,U8) -> U8
take_tup (x,y) = x + y


unit : () -> ()
unit () = ()


afun_ffi : U8 -> U8

afun_call : U8 -> U8
afun_call x = afun_ffi x


lit_u8 : () -> U8
lit_u8 _ = 10


prim_u8 : U8 -> U8
prim_u8 x = x * 2

prim_u8_many : U8 -> U8
prim_u8_many x = x + (x * 2) - 100


if_bool : U8 -> U8
if_bool u = if u > 10 then 100 else 0


member_unboxed : #{b : U8, a : (), d : U8} -> U8
member_unboxed r = r.b

put_unboxed : #{b : U8, a : (), d : U8} -> #{b : U8, a : (), d : U8}
put_unboxed r = r { d = 10 }

take_and_put_suc_unboxed : #{b : U8, a : (), d : U8} -> #{b : U8, a : (), d : U8}
take_and_put_suc_unboxed r =
  let r' {b = b} = r {d = 10}
  in r' {b = b + 1}
 
put_boxed : {b : U8, a : (), d : U8} -> {b : U8, a : (), d : U8}
put_boxed r = r { b = 10 }

take_and_put_suc_boxed : {b : U8, a : (), d : U8} -> {b : U8, a : (), d : U8}
take_and_put_suc_boxed r =
  let r' { b = b } = r
  in r' { b = b + 1 }


let_bang : { a : U8, b : U8 } -> {a : U8, b : U8 }
let_bang r
 = let i = r.a !r
   in r { a = i }

let_bang_2 : { a : U8, b : U8 } -> {a : U8, b : U8 }
let_bang_2 r
 = let i = r.a + r.b !r
   in r { a = i }

type X = U32
type Y = U32
type B = U32
type A = { a : { x : X, y : Y } take (), b : B } take ()

foo : (X!) ->  ()
foo _ = ()

bar : (A) -> < Success (A) >
bar (val) = let () = foo (val.a.x) !val in Success (val)

