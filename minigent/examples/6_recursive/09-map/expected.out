alloc : [x] . Unit -> mu t {l : <Cons {data : x,rest : rec t}#|Nil Unit> take};
map : [a, b]
      .
      {f : a -> b,list : mu t {l : <Cons {data : a,rest : rec t}#|Nil Unit>}!}#
      -> mu t {l : <Cons {data : b,rest : rec t}#|Nil Unit>};
map l = take l2 { list = node } = l : {f : a -> b
                                      ,list : mu t {l : <Cons {data : a
                                                              ,rest : rec t}#
                                                        |Nil Unit>}!}#
        in take l3 { f = fun } = l2 : {f : a -> b
                                      ,list : mu t {l : <Cons {data : a
                                                              ,rest : rec t}#
                                                        |Nil Unit>}! take}#
           in take node2 { l = head } = node : mu t {l : <Cons {data : a
                                                               ,rest : rec t}#
                                                         |Nil Unit>}!
              in case head : <Cons {data : a,rest : rec t}#|Nil Unit> of
                   Nil u -> let newNode = (alloc[b] : Unit
                                                      -> mu t {l : <Cons {data : b
                                                                         ,rest : rec t}#
                                                                   |Nil Unit> take}) (Unit : Unit) : mu t {l : <Cons {data : b
                                                                                                                     ,rest : rec t}#
                                                                                                               |Nil Unit> take}
                            in put newNode : mu t {l : <Cons {data : b
                                                             ,rest : rec t}#
                                                       |Nil Unit> take}.l := Nil (Unit : Unit) : <Cons {data : b
                                                                                                       ,rest : rec t}#
                                                                                                 |Nil Unit>
                               end : mu t {l : <Cons {data : b,rest : rec t}#
                                               |Nil Unit>}
                            end : mu t {l : <Cons {data : b,rest : rec t}#
                                            |Nil Unit>}
                 | v2 -> case v2 : <Cons {data : a,rest : rec t}#
                                   |Nil Unit take> of
                           Cons remaining -> take remaining2 { data = x } = remaining : {data : a
                                                                                        ,rest : rec t}#
                                             in let newNode = (alloc[b] : Unit
                                                                          -> mu t {l : <Cons {data : b
                                                                                             ,rest : rec t}#
                                                                                       |Nil Unit> take}) (Unit : Unit) : mu t {l : <Cons {data : b
                                                                                                                                         ,rest : rec t}#
                                                                                                                                   |Nil Unit> take}
                                                in put newNode : mu t {l : <Cons {data : b
                                                                                 ,rest : rec t}#
                                                                           |Nil Unit> take}.l := Cons ({data = (fun : a
                                                                                                                      -> b) (x : a) : b
                                                                                                       ,rest = (map[ a
                                                                                                                   , b ] : {f : a
                                                                                                                                -> b
                                                                                                                           ,list : mu t {l : <Cons {data : a
                                                                                                                                                   ,rest : rec t}#
                                                                                                                                             |Nil Unit>}!}#
                                                                                                                           -> mu t {l : <Cons {data : b
                                                                                                                                              ,rest : rec t}#
                                                                                                                                        |Nil Unit>}) ({list = (remaining2 : {data : a take
                                                                                                                                                                            ,rest : mu t {l : <Cons {data : a
                                                                                                                                                                                                    ,rest : rec t}#
                                                                                                                                                                                              |Nil Unit>}!}#).rest : mu t {l : <Cons {data : a
                                                                                                                                                                                                                                     ,rest : rec t}#
                                                                                                                                                                                                                               |Nil Unit>}!
                                                                                                                                                      ,f = fun : a
                                                                                                                                                                 -> b} : {f : a
                                                                                                                                                                              -> b
                                                                                                                                                                         ,list : mu t {l : <Cons {data : a
                                                                                                                                                                                                 ,rest : rec t}#
                                                                                                                                                                                           |Nil Unit>}!}#) : mu t {l : <Cons {data : b
                                                                                                                                                                                                                             ,rest : rec t}#
                                                                                                                                                                                                                       |Nil Unit>}} : {data : b
                                                                                                                                                                                                                                      ,rest : rec t}#) : <Cons {data : b
                                                                                                                                                                                                                                                               ,rest : rec t}#
                                                                                                                                                                                                                                                         |Nil Unit>
                                                   end : mu t {l : <Cons {data : b
                                                                         ,rest : rec t}#
                                                                   |Nil Unit>}
                                                end : mu t {l : <Cons {data : b
                                                                      ,rest : rec t}#
                                                                |Nil Unit>}
                                             end : mu t {l : <Cons {data : b
                                                                   ,rest : rec t}#
                                                             |Nil Unit>}
                         end : mu t {l : <Cons {data : b,rest : rec t}#
                                         |Nil Unit>}
                 end : mu t {l : <Cons {data : b,rest : rec t}#|Nil Unit>}
              end : mu t {l : <Cons {data : b,rest : rec t}#|Nil Unit>}
           end : mu t {l : <Cons {data : b,rest : rec t}#|Nil Unit>}
        end : mu t {l : <Cons {data : b,rest : rec t}#|Nil Unit>};