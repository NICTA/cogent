# This file is modified by Zilin Chen, based on the template generated by https://github.com/hvr/multi-ghc-travis

language: c
sudo: required
dist: trusty

group: edge

git:
  submodules: false

# branches:
#   except:
#   - branch-name

cache:
  directories:
    - $HOME/.cabsnap
    - $HOME/.ghc
    - $HOME/.cabal/lib
    - $HOME/.cabal/share
    - $HOME/.cabal/packages
    - $HOME/.cabal/bin
    # - $REPO/cogent/$SANDBOX
    - $HOME/z3

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.tar

env:
  global:
    - SANDBOX=".cabal-sandbox"
    - REPO=$TRAVIS_BUILD_DIR

matrix:
  include:
    - env: CABALVER=2.2 GHCVER=8.4.1
      compiler: ": #GHC 8.4.1"
      addons: {apt: {packages: [cabal-install-2.2,ghc-8.4.1,alex-3.1.7,happy-1.19.5], sources: [hvr-ghc]}}
    - env: CABALVER=2.2 GHCVER=8.4.2
      compiler: ": #GHC 8.4.2"
      addons: {apt: {packages: [cabal-install-2.2,ghc-8.4.2,alex-3.1.7,happy-1.19.5], sources: [hvr-ghc]}}
    - env: CABALVER=2.2 GHCVER=8.4.3
      compiler: ": #GHC 8.4.3"
      addons: {apt: {packages: [cabal-install-2.2,ghc-8.4.3,alex-3.1.7,happy-1.19.5], sources: [hvr-ghc]}}
    - env: CABALVER=2.0 GHCVER=8.2.1
      compiler: ": #GHC 8.2.1"
      addons: {apt: {packages: [cabal-install-2.0,ghc-8.2.1,alex-3.1.7,happy-1.19.5], sources: [hvr-ghc]}}
    - env: CABALVER=2.0 GHCVER=8.2.2
      compiler: ": #GHC 8.2.2"
      addons: {apt: {packages: [cabal-install-2.0,ghc-8.2.2,alex-3.1.7,happy-1.19.5], sources: [hvr-ghc]}}
  # allow_failures:
  #   - env: CABALVER=2.0 GHCVER=8.4.1
  fast_finish: true

before_install:
 - unset CC
 - export ALEXVER=3.1.7
 - export HAPPYVER=1.19.5
 - export PATH=~/.cabal/bin:/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:/opt/happy/$HAPPYVER/bin:/opt/alex/$ALEXVER/bin:$REPO/cogent/$SANDBOX/bin:$PATH

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - if [ -f "$HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz" ];
   then
     echo "==== Hackage index file found ====";
     zcat $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz >
          $HOME/.cabal/packages/hackage.haskell.org/00-index.tar;
   fi
 - travis_retry cabal update # -v
 - cd cogent
 - cabal sandbox init
 - cabal sandbox add-source ../isa-parser
 - cabal sandbox add-source ../cogent-doc
 - cabal sandbox add-source ../cogent-language
 - "sed -i 's/^jobs:.*$/jobs: 2/' $HOME/.cabal/config"
 # - sed -i 's/^jobs:/ jobs:/' ${HOME}/.cabal/config
 # Use fixed build plans
 - cp misc/cabal.config.d/cabal.config-$GHCVER cabal.config
 - |
   # In the future, the nix-style thingy might be helpful
   if cabal install --only-dependencies --force-reinstalls --enable-tests --dry -v > installplan.txt;
   then
     sed -i -e '1,/^Resolving /d' installplan.txt;
     echo "==== Succeeded to generate an install plan. ====";
     cat installplan.txt;  # Debugging
   else
     echo "==== Failed to generate an install plan. ====";
     cat installplan.txt;  # Display errors
   fi

# check whether current requested install-plan matches cached package-db snapshot
 - |
   if diff -u $HOME/.cabsnap/installplan.txt installplan.txt;
   then
     echo "==== cabal build-cache HIT ====";  # so copy cached sandbox
     rm -rf $SANDBOX
     cp -a $HOME/.cabsnap/$SANDBOX $REPO/cogent/
   else
     echo "==== cabal build-cache MISS (or error) ====";
     rm -rf $HOME/.cabsnap;
     # mkdir -p $HOME/.ghc $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin;
     cabal install --only-dependencies --force-reinstalls;  # --enable-tests;
   fi

# snapshot package-db on cache miss
 - |
   if [ ! -d $HOME/.cabsnap ];
   then
      echo "==== snapshotting package-db to build-cache ====";
      mkdir $HOME/.cabsnap;
      cp installplan.txt $HOME/.cabsnap/.
      cp -a $SANDBOX $HOME/.cabsnap/
   fi

# Install z3
 - cd $REPO
 - git submodule update --init -- z3
 - cd z3
 - mkdir -p "$HOME"/z3
 - export PATH="$HOME/z3/bin:$PATH"
 - |
   if ! which z3;
   then # install z3
     python scripts/mk_make.py --prefix="$HOME/z3"
     cd build
     make
     make install
   fi
 - which z3 || travis_terminate 1

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 - cd $REPO/cogent
 # - echo 'Configuring Cogent'
 - cabal configure # --enable-tests  # or -v2 to provide useful information for debugging
 # - echo 'Installing Cogent'
 - cabal install --force-reinstalls # --enable-tests
 # - cabal build   # this builds all libraries and executables (including tests/benchmarks)
 # - cabal test  # this rarely changes, so disabled for now to save some time / zilinc
 # - cabal check
 # Check if Cogent has been correctly installed
 - which cogent || travis_terminate 1
 # - echo 'Running tests'
 - make test-pp
 - make test-tc
 - make test-ds
 - make test-an
 - make test-mn
 - make test-cg
 - make test-aq
 - make test-flags
 # - echo 'Typechecking libgum'
 - make test-libgum
 # - echo 'Building Cogent examples'
 - make examples
 # - echo 'Generating ext2fs C code from Cogent'
 - cd $REPO/impl/fs/ext2/cogent && travis_wait make .c-gen
 # - echo 'Generating BilbyFs C code from Cogent'
 - cd $REPO/impl/fs/bilby/cogent && travis_wait make .c-gen

notifications:
  hipchat:
    rooms:
      secure: BbgWKKsYcSrujfxOS7bHn9oKhTIAOsG0WbTkFybIfcTL3Ma3EhlGRr6Kj2S2f9Qf8SpewEcCBFbCCBqX0lb0vpbopEyRXnlA85k9WsJWC6Xxy/LbPDRXw54OeKnyO3w17FuvvzXIT62eBN1s7HeRDAU4UzLHbehhmmLBN8dn8PeEt4U4bXqHhpIJrFhNDvQY20KJDYzgQFbZPkF36XW3UGYumOE8YYwgwipIchpFmWanhydIKRPd7E4XlT61C+9d3awcxNpmRpx/G3nrxmea4kQDokrbBxrZvc/2xKGYHo+demsLz7d3NQROSeilOkrxZW41Sb4lFzw5yTY82qOfuR3hpZtGXDmKYeJ4xIuX8cGhPEtsO1ZqFqk6uHUjMCu+Q057R+918AeNqyjPcrcFn+kLnhWhcHbIGeJf4JRsC+jNP14M6BBYsjxVeWiTz3TzCUtMSMSh8sMIMCef40V7gUf32sDk/wR8j8cfkjK2BENprzKgqsnxiseDggEHTRKSoysXUiIPYs6+IDQSS178xJXzWy2V8TzLEEPvyuyUzSyVsvjYQ6TeNgkwxhk7Z4XYH0w5x1LCOgV0PWX/g00Wp08zMwv5I7JOUi4PkyzEP2zGPg6GQN9Ar9NRYbFbjBCv8I1XeCpTeFzwBeReNHTWRHh+YVrgmiAADCIsC+3GjfQ=
  slack:
    rooms:
      - cogent-club:dUKOfdIU3BGsvalWStE0BCGG#dev
# EOF
