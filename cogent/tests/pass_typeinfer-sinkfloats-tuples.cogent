
type Foo a = a -> a

type Bar a = a! -> ()

type FooBar a = #
  { curr : a
  , foo : Foo a
  , bar : Bar a
  }

foobar : all (a) . (a, Foo a, Bar a) -> FooBar a
foobar (curr, foo, bar) = #{ curr, foo, bar }

funca : all (a,b). (a,b) -> FooBar (a,b)
funca curr =
  let foo : Foo (a, b)
    = \(a, b) => (a, b)
  and bar : Bar (a,b)
    = \(a, b) => ()
   in foobar (curr, foo, bar)

