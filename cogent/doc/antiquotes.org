#
# Copyright 2019, Data61
# Commonwealth Scientific and Industrial Research Organisation (CSIRO)
# ABN 41 687 119 230.
# 
# This software may be distributed and modified according to the terms of
# the GNU General Public License version 2. Note that NO WARRANTY is provided.
# See "LICENSE_GPLv2.txt" for details.
#
# @TAG(DATA61_GPL)
#

#+TITLE: Cogent Antiquotation in C

*WARNING:* Cogent antiquotation currently does *not* have any sanity checks. So please follow the guide
closely otherwise debugging could be a huge pain.

* Cheatsheet (For new users, skip this section)

~$id~: for function identifiers or type identifiers when defining them

~$ty~: refer to a Cogent type

~$exp~: call a Cogent function, which has to have exactly one argument, as in Cogent; any Cogent expressions

~$spec~: specify the Cogent type of a C function (using typecast syntax), which is applied to exactly one argument

~$esc~: macros that should not be preprocessed before antiquoted C is compiled


* Overview

Cogent is a restricted language; there are many things that Cogent cannot
express and should be deferred to native C code. In the foreign function
interfaces between Cogent and C, it can be seen that accessing C code from Cogent
and the other direction are not symmetric, as Cogent will be generated to C code.
To access C code from Cogent, programmers
write abstract types (types without definitions) and abstract functions on the
Cogent side , and on the C side define the implementation of the types and
functions. For the compiler to realise which implementation is for which
interface, we need to make sure that the name of both sides coincide. But there
is a problem: Cogent is polymorphic, and is structurally types, whereas C is
monomorphic and nominally typed. What it means is that the Cogent compiler will
generate "random" names for the generated interfaces (of course they are not
truly random, they are just so random that a programmer can barely guess what
they will be; see https://github.com/NICTA/cogent/issues/322 for more details).
To make the names on both sides coincide, Cogent provides a way for programmers
correctly "guess" the generated names---antiquotations. That's why the C
components one write for a Cogent program is generally referred to as
*antiquoted C* (it's because we borrow the syntax of antiquotes; see G.
Mainland,
[[https://www.cs.tufts.edu/comp/150FP/archive/geoff-mainland/quasiquoting.pdf][Why it's nice to be quoted: quasiquoting for Haskell]]). 
And for accessing Cogent code from C, programmers also need a way to refer to
the Cogent names. In a nutshell, in antiquoted C, programmers can write Cogent
snippets (e.g. Cogent types, polymorphic function names, and many other things)
and the Cogent compiler will compile each snippet in the same way as it
compiled the Cogent program, resulting in a coherent set of names generated.


* Modes in the compiler

We have two different modes for handling antiquotation. One is /type mode/, with command-line argument ~--infer-c-type~. In this mode,
users can only define abstract parametric Cogent types. The output will be placed to pre-defined directory, one file per
monomorphised type. Each file is ~#include~'ed by the generated ~.h~ file. Another mode is /function mode/, which is enabled by 
~--infer-c-func~ flag to the compiler (note: these two modes are not mutually exclusive). This mode is for everything else, and
the output filename is derived from the input filename.


* Function definitions

We can define an abstract function which has been declared in Cogent. For example, in Cogent we have:

#+BEGIN_SRC
foo : all (a, b). a -> b
#+END_SRC

Then in C, we can define function ~foo~ by

#+BEGIN_SRC
$ty:b $id:foo ($ty:a arg) {
  // ...
}
#+END_SRC

~$id~, ~$ty~ are antiquoters for identifiers and types respectively. If the antiquoted code consists of only one single identifier 
*starting with a lower-case letter*, then no parens are required (e.g. ~$ty:acc~), otherwise we have to write parens around it, 
like ~$ty:(R a b)~ and ~$ty:(U32)~. Note: If the antiquoted type is unit or a tuple, then we have to
have at least two pairs of parens, the inner one for the tuple, and the outer one for antiquotation.

Functions defined using antiquotation have to be parametrically polymorphic or monomorphic. ~$id~ is needed for poly-functions only.
The reason behind it is, a mono-function will be generated to a C function with exactly the same name (modulo unsupported
identifier characters), thus the function name will stay intact. For a poly-function, as we can see from the example above, the user
doesn't write ~all~ quantification as in Cogent. Type parameters, if any, are introduced *implicitly* by the corresponding
declaration in Cogent, namely ~a~ and ~b~ in the above instance. Besides, we need to generate new function names
according to the instantiation. For these reasons, the compiler needs to know what and where the function name is, in order
to establish a connection to the Cogent counterpart and to generate new function instantiations. Thus ~$id~ is a needed as a
signal to the function name. The compiler then will generate one copy for each monomorphisation.

In a function definition, other forms of antiquotes are supported. By ~exp:f~, we can invoke Cogent function ~f~. (In fact, ~$exp~
theoretically supports all kinds of Cogent expressions, but this feature is not well tested and largely experimental. Use with care!) 
As in Cogent, if this function
~f~ is polymorphic, then it has to be fully applied to types. To call higher-order functions, as the function and its argument are usually
not given by Cogent antiquotes (i.e. they are C expressions), we cannot directly call it using the ~$exp~ antiquotation as above. 
E.g. we have the following scenario:

#+BEGIN_SRC
void foo ($ty:((A -> B, A)) arg) {
  // ...
}
#+END_SRC

To apply the first component of the pair ~arg.p1~ to the second ~arg.p2~, in order to generate the dispatch function,
we have to give the type of the function -- ~arg.p1~ -- to the compiler. We write 

#+BEGIN_SRC
(($spec:(A -> B)) arg.p1) (arg.p2);  // the parens around type specifier and function is necessary!
#+END_SRC

The syntax is actually for typecasting in C, we hijack (or better, embed) our semantics in it. This satisfies our principle that everything
inside an antiquote is valid Cogent code.

One thing also worth mentioning here is that, antiquoted functions (no matter first order or higher order) can only be applied to
exactly one argument, as in Cogent. Otherwise it will generate totally non-sensical code and the error message from the C compiler
will not help in general. We are trying to implement some sanity checks in the antiquotation part.


* Type declarations / Typedef's

Similarly, we can define *abstract* Cogent types using antiquotation. For example,

#+BEGIN_SRC
-- Cogent
type R a b
type T a b c

// C
struct $id:(R a b) {
  // ...
};

typedef struct $id:(T x y z) {
  // ...
} $id:(T x y z);

typedef struct $id:(R a b) $id:(R a b);

#+END_SRC

Most of the knowledge about it can be deduced from previous section, which will not be repeated here. One difference is that
users need to write fully applied type constructors, namely with type arguements, and they have to be identical to those given in Cogent.
When using ~typedef~, only one synonym can be given, if it's antiquoted. And it has to be the same as the type it is defined to.
Something like ~typedef struct $id:(X a) $id:(Y a)~ is invalid.

Non-parametric abstrct types cannot be used in this way, otherwise they will be put to the wrong output file. In order to refer to any
Cogent types in the definition, what the users can do is to *NOT* antiquote the type name, and use it in the function mode, as the 
type name in C will be exactly the same as that in Cogent (modulo namespace renaming). E.g.,

#+BEGIN_SRC
-- Cogent
type R

-- C
struct $id:(C) { ... };  // wrong!
struct C { ... };  // correct!
#+END_SRC


* Escape sequences

Any C code which is beyond the reach of the Haskell C parser (http://hackage.haskell.org/package/language-c-quote)
should be wrapped by a ~$esc~. In particular, if you have any ~#include~'ed files that don't want to be preprocessed (usually for the
reason that they contain some language extensions which our C parser does not support), use ~$esc~ antiquoter to escape.

Cogent also suppports conditional compilation in the style of _cpp_ (C preprocessor). Directives (e.g. ~#define~, ~#if~, etc.) should also
be wrapped in ~$esc~ so that they are left to the C compiler, instead of (mistakenly) being processed by Cogent's C preprocessor.
For statement level directives, you need the alternative ~$escstm~ antiquote specifier rather than ~$esc~.


* Expressions

We can antiquote any valid Cogent expressions, using ~$exp~ antiquote. They will be turned to *statement-expression* in C.

