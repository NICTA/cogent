/*
 * Copyright 2016, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

static int ext2fs_readpage_nolock(struct file *file, struct page *page);
static int ext2fs_writepage_nolock(struct page *page, struct writeback_control *wbc);
static int ext2fs_writepages_nolock(struct address_space *mapping, struct writeback_control *wbc);
static int ext2fs_readpages_nolock(struct file *file, struct address_space *mapping,
                                   struct list_head *pages, unsigned nr_pages);
static sector_t ext2fs_bmap_nolock(struct address_space *mapping, sector_t block);
static int ext2fs_write_begin_nolock(struct file *file, struct address_space *mapping,
                                     loff_t pos, unsigned len, unsigned flags,
                                     struct page **pagep, void **fsdata);
static int ext2fs_write_end_nolock(struct file *file, struct address_space *mapping,
                                   loff_t pos, unsigned len, unsigned copied,
                                   struct page *page, void *fsdata);
static int __nolock_write_one_page(struct page *page, int wait);
int ext2fs_get_block(struct inode *inode, sector_t iblock,
                     struct buffer_head *bh_result, int create);


// NOT re-entrant, readpage
// TODO: probably split this function up into two bits; makes for a weird API
$ty:(R OSPage ()) ospagecache_read ($ty:((VfsMemoryMap, U64)) args) {
    $ty:(R OSPage ()) ret;
    unit_t unit;

    struct address_space* mapping = args.p1;
    unsigned long n = args.p2;

    if (unlikely (!mapping)) {
        printk ("read mapping failed - no mapping\n");
        ret.tag = TAG_ENUM_Error;
        ret.Error = unit;
        return ret;
    }
    
    // struct page* page = read_mapping_page (mapping, n, NULL); // re-entrant
    struct page* page = read_cache_page (mapping, n, (filler_t *)ext2fs_readpage_nolock, NULL);

    if (unlikely (IS_ERR (page))) {
        printk ("failed on page %p\n", page);
        ospagecache_release (page);

        ret.tag = TAG_ENUM_Error;
        ret.Error = unit;
    } else {
        ret.tag = TAG_ENUM_Success;
        ret.Success = page;
    }

    // printk ("read page %p from mapping %p at idx %lu\n", page, mapping, n);

    return ret;
}

$ty:(R OSPage ()) ospagecache_grab ($ty:((VfsMemoryMap, U64)) args) {
    $ty:(R OSPage ()) ret;
    unit_t unit;

    struct page* page = grab_cache_page (args.p1, args.p2);

    if (unlikely (IS_ERR (page))) {
        ospagecache_release (page);

        ret.tag = TAG_ENUM_Error;
        ret.Error = unit;
    } else {
        ret.tag = TAG_ENUM_Success;
        ret.Success = page;
    }

    // printk ("grabbed page %p from mapping %p at idx %lu\n", page, args.p1, args.p2);

    return ret;
}

unit_t ospagecache_release ($ty:(OSPage) page) {
    unit_t ret;

$escstm:(#if LINUX_VERSION_CODE < KERNEL_VERSION(4,4,0))
    page_cache_release(page);
$escstm:(#else)
    put_page(page);
$escstm:(#endif)

    return ret;
}

$ty:(R (OSPage, OSPageBuffer) OSPage) ospage_map ($ty:(OSPage) page) {
    $ty:(R (OSPage, OSPageBuffer) OSPage) ret;

    // printk ("mapping page %p\n", page);
    kmap (page);

    if (unlikely (PageError (page))) {
        printk ("had page error on map %p\n", page);
        kunmap (page);

        ret.tag = TAG_ENUM_Error;
        ret.Error = page;
    } else {
        ret.tag = TAG_ENUM_Success;
        ret.Success.p1 = page;
        ret.Success.p2 = page; // FIXME: ospagebuffer should just be void* to pagebuf
    }

    return ret;
}

$ty:(OSPage) ospage_unmap ($ty:((OSPage, OSPageBuffer)) args) {

    // printk ("unmapping page %p\n", args.p1);

    // FIXME: check that .p1 and .p2 are from the same object
    // and return Error if not?

    kunmap (args.p1);
    return args.p1;
}

$ty:(Result (U32, OSPageBufferOffset) ())
ospagebuffer_deserialise_Ple32 ($ty:((OSPageBuffer!, OSPageBufferOffset)) args) {
    $ty:(Result (U32, OSPageBufferOffset) ()) ret;
    
    void* addr = page_address (args.p1);
    u32* final_addr = (u32*)(addr + args.p2);

    // printk ("getting u32 from page %p @ addr %p + off %d = addr %p\n", args.p1, addr, args.p2, final_addr);

    u32 raw = *final_addr;
    u32 host = le32_to_cpu (raw);

    // printk ("value was %d\n", host);

    ret.tag = TAG_ENUM_Success;
    ret.Success.p1 = host;
    ret.Success.p2 = args.p2 + sizeof (u32);

    return ret;
}

// deserialise_Ple16: (FsBuffer!, U32) -> Result (U16, U32) ()
$ty:(Result (U16, OSPageBufferOffset) ())
ospagebuffer_deserialise_Ple16 ($ty:((OSPageBuffer!, OSPageBufferOffset)) args) {
    $ty:(Result (U16, OSPageBufferOffset) ()) ret;
    
    void* addr = page_address (args.p1);
    u16* final_addr = (u16*)(addr + args.p2);

    // printk ("getting u16 from page %p @ addr %p + off %d = addr %p\n", args.p1, addr, args.p2, final_addr);

    u16 raw = *final_addr;
    u16 host = le16_to_cpu (raw);

    // printk ("value was %d\n", host);

    ret.tag = TAG_ENUM_Success;
    ret.Success.p1 = host;
    ret.Success.p2 = args.p2 + sizeof (u16);

    return ret;
}

// deserialise_U8 (FsBuffer!, U32) -> Result (U8, U32) ()
$ty:(Result (U8, OSPageBufferOffset) ())
ospagebuffer_deserialise_U8 ($ty:((OSPageBuffer!, OSPageBufferOffset)) args) {
    $ty:(Result (U8, OSPageBufferOffset) ()) ret;

    void* addr = page_address (args.p1);
    u8* final_addr = (u8*)(addr + args.p2);

    // printk ("getting u8 from page %p @ addr %p + off %d = addr %p\n", args.p1, addr, args.p2, final_addr);

    u8 raw = *final_addr;

    // printk ("value was %d\n", raw);

    ret.tag = TAG_ENUM_Success;
    ret.Success.p1 = raw;
    ret.Success.p2 = args.p2 + sizeof (u8);

    return ret;
}

$ty:(Result (OSPageBuffer, OSPageBufferOffset) (OSPageBuffer))
ospagebuffer_serialise_Ple32 ($ty:((OSPageBuffer, OSPageBufferOffset, U32)) args) {
    $ty:(Result (OSPageBuffer, OSPageBufferOffset) (OSPageBuffer)) ret;
    
    u8* addr = (u8*)page_address (args.p1) + args.p2;
    u32* final_addr = (u32*)addr;

    u32 host = args.p3;
    __le32 raw = cpu_to_le32 (host);

    // printk ("serialise to kaddr %p off %d = %p value %d\n", page_address(args.p1), args.p2, final_addr, args.p3);
    *final_addr = raw;

    ret.tag = TAG_ENUM_Success;
    ret.Success.p1 = args.p1;
    ret.Success.p2 = args.p2 + sizeof (u32);

    return ret;
}


$ty:(Result (OSPageBuffer, OSPageBufferOffset) (OSPageBuffer))
ospagebuffer_serialise_Ple16 ($ty:((OSPageBuffer, OSPageBufferOffset, U16)) args) {
    $ty:(Result (OSPageBuffer, OSPageBufferOffset) (OSPageBuffer)) ret;
    
    u8* addr = (u8*)page_address (args.p1) + args.p2;
    u16* final_addr = (u16*)addr;

    u16 host = args.p3;
    __le16 raw = cpu_to_le16 (host);

    // printk ("serialise to kaddr %p off %d = %p value %d\n", page_address(args.p1), args.p2, final_addr, args.p3);
    *final_addr = raw;

    ret.tag = TAG_ENUM_Success;
    ret.Success.p1 = args.p1;
    ret.Success.p2 = args.p2 + sizeof (u16);

    return ret;
}

$ty:(Result (OSPageBuffer, OSPageBufferOffset) (OSPageBuffer))
ospagebuffer_serialise_U8 ($ty:((OSPageBuffer, OSPageBufferOffset, U8)) args) {
    $ty:(Result (OSPageBuffer, OSPageBufferOffset) (OSPageBuffer)) ret;
    
    void* addr = page_address (args.p1);
    u8* final_addr = (u8*)(addr + args.p2);

    // printk ("serialise to kaddr %p off %d = %p value %d\n", addr, args.p2, final_addr, args.p3);
    *final_addr = args.p3;

    ret.tag = TAG_ENUM_Success;
    ret.Success.p1 = args.p1;
    ret.Success.p2 = args.p2 + sizeof (u8);

    return ret;
}

$ty:(OSPageBuffer) ospagebuffer_memset ($ty:((OSPageBuffer, OSPageBufferOffset, U32, U32)) args) {
    void* addr = page_address (args.p1);

    memset (addr + args.p2, args.p3, args.p4);
    return args.p1;
}

// NOT re-entrant
//
// this assumes that ex, state pointers do not change
// IF THEY DO, YOU MUST SAVE AND RESTORE THEM FOR THE PARENT CALLER
// THIS IS NOT A TOP-LEVEL FUNCTION!
//
// note we do not lock, since we've already locked from the outside world
$ty:(RR (SysState, FsState, OSPage) () U32)
ospage_write_prepare ($ty:((SysState, FsState, OSPage, U64, U32)) args) {
    $ty:(RR (SysState, FsState, OSPage) () U32) ret;
    ret.p1.p1 = args.p1;
    ret.p1.p2 = args.p2;
    ret.p1.p3 = args.p3;

    int res = __block_write_begin(args.p3, args.p4, args.p5, ext2fs_get_block);
    if (res == 0) {
        ret.p2.tag = TAG_ENUM_Success;
    } else {
        ret.p2.tag = TAG_ENUM_Error;
        ret.p2.Error = res;
    }

    return ret;
}

// same comment as above
// not rentrant, from what I can tell?
$ty:((SysState, FsState, OSPage))
ospage_write_commit ($ty:((SysState, FsState, OSPage, U64, U32)) args) {
    $ty:((SysState, FsState, OSPage)) ret = {.p1 = args.p1, .p2 = args.p2, .p3 = args.p3 };
    block_write_end (NULL, args.p3->mapping, args.p4, args.p5, args.p5, args.p3, NULL);

    return ret;
}

$ty:(VfsInode) ospage_get_host ($ty:(OSPage!) page) {
    struct inode* inode = page->mapping->host;

    ihold (inode);
    return EXT2_I (inode);
}

$ty:(OSPage) ospage_lock ($ty:(OSPage) args) {
    lock_page (args);
    return args;
}

$ty:(OSPage) ospage_unlock ($ty:(OSPage) args) {
    unlock_page (args);
    return args;
}

// no longer lock re-entrant, writepage
$ty:(OSPage) ospage_write ($ty:(OSPage) page) {
    __nolock_write_one_page (page, 1);
    return page;
}
