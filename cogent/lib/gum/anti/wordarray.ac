/*
 * Copyright 2018, Data61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(DATA61_GPL)
 */

$ty:a $id:wordarray_get($ty:(((WordArray a)!, WordArrayIndex)) args)
{
        if (args.p2 >= (args.p1)->len) {
                return 0;
        }
        return (args.p1)->values[args.p2];
}

$ty:(R (WordArray a) (WordArray a)) $id:wordarray_put($ty:((#{arr: WordArray a, idx: WordArrayIndex, val: a})) args)
{
        $ty:(R (WordArray a) (WordArray a)) ret;

        if (args.idx >= (args.arr)->len) {
                ret.tag = TAG_ENUM_Error;
                ret.Error = args.arr;
        } else {
                (args.arr)->values[args.idx] = args.val;
                ret.tag = TAG_ENUM_Success;
                ret.Success = args.arr;
        }
        return ret;
}

u32 $id:wordarray_length($ty:((WordArray a)!) array)
{
        return array->len;
}

$ty:(ArrA (WordArray a) acc) $id:wordarray_modify($ty:(WordArrayModifyP a acc obsv) args)
{
        $ty:(ArrA (WordArray a) acc) ret;
        $ty:(ElemAO a acc obsv) fargs;
        $ty:(ElemA a acc) fret;

        /* only run fun if the idx is in range */
        if (args.idx >= args.arr->len) {
                ret.acc = args.acc;
                ret.arr = args.arr;
                return ret;
        }
        fargs.elem = args.arr->values[args.idx];
        fargs.acc = args.acc;
        fargs.obsv = args.obsv;
        fret = (($spec:(WordArrayModifyF a acc obsv)) args.f) (fargs);
        args.arr->values[args.idx] = fret.elem;
        ret.acc = fret.acc;
        ret.arr = args.arr;
        return ret;
}

$ty:(Bool) $id:wordarray_cmp($ty:(((WordArray U8)!, (WordArray U8)!)) args)
{
        $ty:((WordArray U8)!) a = args.p1;
        $ty:((WordArray U8)!) b = args.p2;
        $ty:(Bool) ret;
        int len, r;

        if (a->len != b->len) {
                ret.boolean = 0;
                return ret;
        }

        len = a->len;

        r = memcmp(a->values, b->values, len);
        ret.boolean = (r == 0) ? 1 : 0;

        return ret;
}

$ty:((WordArray a, acc)) $id:wordarray_map_no_break($ty:(WordArrayMapNoBreakP a acc obsv) args)
{
        $ty:((WordArray a, acc)) ret;
        $ty:(ElemAO a acc obsv) fargs;
        $ty:((a, acc)) fret;
        u32 to = args.to > args.arr->len ? args.arr->len : args.to;
        u32 i;

        fargs.acc = args.acc;
        fargs.obsv = args.obsv;
        for (i = args.frm; i < to; i++) {
                fargs.elem = args.arr->values[i];
                fret = (($spec:(WordArrayMapNoBreakF a acc obsv)) args.f)(fargs);
                args.arr->values[i] = fret.p1;
                fargs.acc = fret.p2;
        }
        ret.p1 = args.arr;
        ret.p2 = fargs.acc;
        return ret;
}

$ty:(WordArrayMapRE a acc rbrk) $id:wordarray_map($ty:(WordArrayMapP a acc obsv rbrk) args)
{
	$ty:(<Iterate () | Break rbrk>) default_variant = { .tag = TAG_ENUM_Iterate};
	$ty:((WordArray a, acc)) init_ret = {.p1 = args.arr, .p2 = args.acc };
	$ty:(WordArrayMapRE a acc rbrk) ret = {.p1 = init_ret, .p2 = default_variant };

	/* setup in case we don't ever loop at all */
	ret.p2.tag = TAG_ENUM_Iterate;

	$ty:(ElemAO a acc obsv) fargs = { .obsv = args.obsv };
	u32 i;

	for (i = args.frm; i < args.to && i < args.arr->len; i++) {
		fargs.elem = args.arr->values[i];
		fargs.acc = ret.p1.p2;

		$ty:(LRR (a,acc) rbrk) fret = (($spec:(WordArrayMapF a acc obsv rbrk)) args.f)(fargs);
		args.arr->values[i] = fret.p1.p1; // <T>

		ret.p1.p2 = fret.p1.p2; // acc
		ret.p2 = fret.p2;

		if (fret.p2.tag == TAG_ENUM_Break) {
			break;
		}
	}

	return ret;
}

$ty:(LoopResult acc rbrk) $id:wordarray_fold($ty:(WordArrayFoldP a acc obsv rbrk) args)
{
        $ty:(ElemAO a acc obsv) fargs;
        $ty:(LoopResult acc rbrk) fret;
        u32 to = args.to > args.arr->len ? args.arr->len : args.to;
        u32 i;

        fargs.obsv = args.obsv;
        fargs.acc = args.acc;
        fret.tag = TAG_ENUM_Iterate;
        fret.Iterate = args.acc;
        for (i = args.frm; i < to; i++) {
               fargs.elem = args.arr->values[i];
               fret = (($spec:(WordArrayFoldF a acc obsv rbrk)) args.f) (fargs);

               if (fret.tag == TAG_ENUM_Break)
                       return fret;
               fargs.acc = fret.Iterate;
        }
        return fret;
}

$ty:(acc) $id:wordarray_fold_no_break($ty:(WordArrayFoldNoBreakP a acc obsv) args)
{
        $ty:(ElemAO a acc obsv) fargs;
        u32 to = args.to > args.arr->len ? args.arr->len : args.to;
        u32 i;

        fargs.obsv = args.obsv;
        fargs.acc = args.acc;

        for (i = args.frm; i < to; i++) {
               fargs.elem = args.arr->values[i];
               fargs.acc = (($spec:(WordArrayFoldNoBreakF a acc obsv)) args.f) (fargs);
        }

        return fargs.acc;
}

$ty:(WordArray a) $id:wordarray_set($ty:(WordArraySetP a) args)
{
        /*
         * args.p1 : array
         * args.p2 : start position
         * args.p3 : length from start position
         * args.p4 : element to set
         */
        u32 start = args.p2;
        u32 len = args.p3;

	if (start > args.p1->len) {
                return args.p1;
	}

        if (start + len > args.p1->len) {
                len = args.p1->len - start;
        }

        memset(args.p1->values + start, args.p4, len);

        return args.p1;
}

$ty:(WordArray a) $id:wordarray_copy($ty:(WordArrayCopyP a) args)
{
        $ty:(WordArray a) dst = args.p1;
        $ty:(WordArray a) src = args.p2;
        u32 dst_index = args.p3;
        u32 src_index = args.p4;
        u32 len = args.p5;

        u32 avail = 0;
        u32 n = 0;

        /* early exit -- tried to copy beyond dest */
        if (dst_index > dst->len || src_index > src->len) {
            return dst;
        }

        avail = (dst->len - dst_index) < (src->len - src_index) ?
                (dst->len - dst_index) : (src->len - src_index);

        n = (avail < len) ? avail : len;

        memcpy(dst->values + dst_index, src->values + src_index, n);

        return dst;
}

$ty:(WordArray a) $id:wordarray_put2($ty:(WordArrayPutP a) args)
{
	if (likely(args.idx < (args.arr)->len)) {
		args.arr->values[args.idx] = args.val;
	}

	return args.arr;
}

$ty:(FindResult) $id:wordarray_findsub ($ty:(WordArrayFindSubP a) args)
{
	$ty:(FindResult) ret;
	u32 start = args.p3;

	$ty:(WordArray a) haystack = args.p1;
	$ty:(WordArray a) needles = args.p2;

	u32 i;
	u32 j;

	for (i = start; i < haystack->len; i++) {
		for (j = 0; j < needles->len; j++) {
			if (haystack->values[i + j] != needles->values[j]) {
				break;
			}
		}

		if (j == needles->len) {
			ret.tag = TAG_ENUM_Found;
			ret.Found = i;
			return ret;
		}
	}

	ret.tag = TAG_ENUM_NotFound;
	return ret;
}

u32 $id:wordarray_u8_as_u32($ty:((WordArray U8)!) args)
{
	unsigned int result = 0;
	if (kstrtouint ((const char*)args->values, 2, &result)) {
		result = 0;
	}

	return result;
}

/* (SysState, WordArray!, start, end) -> RR SysState WordArray () */
$ty:(RR SysState (WordArray a) ()) $id:wordarray_slice($ty:(WordArraySliceP a) args)
{
	$ty:(RR SysState (WordArray a) ()) ret = { .p1 = args.p1 };

	u32 start = args.p3;
	u32 end = args.p4;
	if (end > args.p2->len) {
		end = args.p2->len;
	}

	if (start > end) {
		/* out of range */
		ret.p2.tag = TAG_ENUM_Error;
		return ret;
	}

	u32 len = end - start;

	ret.p2.Success = kmalloc(sizeof(*ret.p2.Success) + len * sizeof(*ret.p2.Success->values), GFP_NOFS);

	if (unlikely(ret.p2.Success == NULL)) {
		ret.p2.tag = TAG_ENUM_Error;
		return ret;
	}
	ret.p2.Success->len = len;
	ret.p2.Success->values = (void *)(ret.p2.Success + 1);

	memcpy(ret.p2.Success->values, args.p2->values + start, len * sizeof(*(ret.p2.Success->values)));

	ret.p2.tag = TAG_ENUM_Success;

	return ret;
}

/**
 *  Experimental
 **/
$ty:acc $id:wordarray_fold' ($ty:(((WordArray a)!, (acc,obsv,a) -> acc, acc, obsv)) args)
{
        $ty:((acc,obsv,a)) fargs;
        u32 i;

        fargs.p1 = args.p3;
        fargs.p2 = args.p4;

        for (i = 0; i < args.p1->len; i++) {
                fargs.p3 = args.p1->values[i];
                fargs.p1 = (($spec:((acc,obsv,a) -> acc)) args.p2) (fargs);
        }

        return fargs.p1;
}

$ty:((WordArray b, acc)) $id:wordarray_map' ($ty:((WordArray a, (acc, obsv, a) -> (acc, a), acc, obsv)) args)
{
        $ty:((WordArray b, acc)) ret;
        $ty:((acc, obsv, a)) fargs;
        $ty:((acc, a)) fret;
        u32 i;

        fargs.p1 = args.p3;
        fargs.p2 = args.p4;

        for (i = 0; i < args.p1->len; i++) {
                fargs.p3 = args.p1->values[i];
                fret = (($spec:((acc, obsv, a) -> (acc, a))) args.p2) (fargs);
                args.p1->values[i] = fret.p2;
                fargs.p1 = fret.p1;
        }

        return ret;
}

$ty:(WordArray a) $id:wordarray_map_ ($ty:((WordArray a, a -> a)) args)
{
        u32 i;

        for (i = 0; i < args.p1->len; i++) {
                args.p1->values[i] = (($spec:(a -> a)) args.p2) (args.p1->values[i]);
        }

        return args.p1;
}

$ty:((WordArray a)!) $id:wordarray_take ($ty:(((WordArray a)!, WordArrayIndex)) args)
{
        $ty:(WordArray a) arr;

        arr->len = args.p2;
        arr->values = args.p1->values;

        return arr;
}

$ty:((WordArray a, WordArray a)) $id:wordarray_split ($ty:((WordArray a, WordArrayIndex)) args)
{
        $ty:(WordArrayIndex) cut = args.p2 > args.p1->len ? args.p1->len : args.p2;
        $ty:((WordArray a, WordArray a)) ret;

        ret.p1->len = cut;
        ret.p2->len = args.p1->len - cut;
        ret.p1->values = args.p1->values;
        ret.p2->values = args.p1->values[cut];

        return ret;
}

$ty:(WordArrayView a) $id:wordarray_view ($ty:((WordArray a, WordArrayIndex, WordArrayIndex, WordArrayIndex)) args)
{
        $ty:(WordArrayView a) view;

        view.arr = args.p1;
        view.frm = args.p2 > 0 ? args.p2 : 0;
        view.to  = args.p3 < view.arr->len ? args.p3 : view.arr->len;
        view.step = args.p4;

        return view;
}

$ty:(WordArray a) $id:wordarray_unview ($ty:(WordArrayView a) args)
{
        return args.arr;
}

$ty:(WordArrayView a) $id:wordarray_map_view ($ty:((WordArrayView a, a -> a)) args)
{
        $ty:(WordArrayView a) view = args.p1;
        u32 i;

        for (i = view.frm; i < view.to; i = i + view.step) {
                view.arr->values[i] = (($spec:(a -> a)) args.p2) (view.arr->values[i]);
        }

        return view;
}

unit_t
wordarray_print(WordArray_u8 *arg)
{
	char s[arg->len + 1];
	/* Couldn't convince myself that
	 * cogent WordArrays were NUL terminated
	 */
	strncpy(s, arg->values, arg->len);
	s[arg->len] = 0;
	return cogent_debug(s);
}