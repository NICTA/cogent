/*
 * Copyright 2019, Data61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(DATA61_GPL)
 */

$esc:(#ifdef __KERNEL__)
unit_t cogent_assert ($ty:(Bool) arg) {
       unit_t ret;
       BUG_ON(!arg.boolean);
       return ret;
}

unit_t cogent_warn (char* str) {
        unit_t ret;
        pr_warning("%s", str);
        return ret;
}

unit_t cogent_warn_u32 (u32 arg) {
        unit_t ret;
        pr_warning("%u", arg);
        return ret;
}

unit_t cogent_warn_u64 (u64 arg) {
        unit_t ret;
        pr_warning("%llu", arg);
        return ret;
}

unit_t cogent_debug (char* str) {
        unit_t ret;
        pr_debug("%s", str);
        return ret;
}

unit_t cogent_debug_u32 (u32 arg) {
        unit_t ret;
        pr_debug("%u", arg);
        return ret;
}

unit_t cogent_debug_u64 (u64 arg) {
        unit_t ret;
        pr_debug("%llu", arg);
        return ret;
}

unit_t cogent_debug_u32_hex (u32 arg) {
        unit_t ret;
        pr_debug("%x", arg);
        return ret;
}

unit_t cogent_debug_u32_oct (u32 arg) {
        unit_t ret;
        pr_debug("%o", arg);
        return ret;
}

unit_t cogent_debug_u64_hex (u64 arg) {
        unit_t ret;
        pr_debug("%llx", arg);
        return ret;
}
unit_t cogent_debug_bool ($ty:(Bool) arg) {
        unit_t ret;
        if (arg.boolean)
          pr_debug("true");
        else
          pr_debug("false");
        return ret;
}

$esc:(#else)
unit_t cogent_assert ($ty:(Bool) arg) {
       unit_t ret;
       BUG_ON(!arg.boolean);
       return ret;
}

unit_t cogent_warn (char* str) {
        unit_t ret;
        printf("%s", str);
        return ret;
}

unit_t cogent_warn_u32 (u32 arg) {
        unit_t ret;
        printf("%u", arg);
        return ret;
}

unit_t cogent_warn_u64 (u64 arg) {
        unit_t ret;
        printf("%llu", arg);
        return ret;
}

unit_t cogent_debug (char* str) {
        unit_t ret;
        printf("%s", str);
        return ret;
}

unit_t cogent_debug_u32 (u32 arg) {
        unit_t ret;
        printf("%u", arg);
        return ret;
}

unit_t cogent_debug_u64 (u64 arg) {
        unit_t ret;
        printf("%llu", arg);
        return ret;
}

unit_t cogent_debug_u32_hex (u32 arg) {
        unit_t ret;
        printf("%x", arg);
        return ret;
}

unit_t cogent_debug_u32_oct (u32 arg) {
        unit_t ret;
        printf("%o", arg);
        return ret;
}

unit_t cogent_debug_u64_hex (u64 arg) {
        unit_t ret;
        printf("%llx", arg);
        return ret;
}
unit_t cogent_debug_bool ($ty:(Bool) arg) {
        unit_t ret;
        if (arg.boolean)
          printf("true");
        else
          printf("false");
        return ret;
}
$esc:(#endif)
