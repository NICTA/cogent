/*
 * Copyright 2016, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */
int ext2fs_create(struct inode * dir, struct dentry * dentry, umode_t mode, bool excl);
struct dentry *ext2fs_lookup(struct inode *dir, struct dentry *dentry, unsigned int flags);
int ext2fs_mkdir(struct inode * dir, struct dentry * dentry, umode_t mode);
int ext2fs_link(struct dentry * old_dentry, struct inode * dir, struct dentry *dentry);
int ext2fs_unlink(struct inode * dir, struct dentry * dentry);
int ext2fs_rmdir(struct inode * dir, struct dentry *dentry);
$esc:(#if LINUX_VERSION_CODE < KERNEL_VERSION(4,4,0))
int ext2fs_rename(struct inode * old_dir, struct dentry * old_dentry,
                  struct inode * new_dir, struct dentry * new_dentry);
$esc:(#else)
int ext2fs_rename(struct inode * old_dir, struct dentry * old_dentry,
                  struct inode * new_dir, struct dentry * new_dentry,
                  unsigned int flags);
$esc:(#endif)
int ext2fs_mknod(struct inode * dir, struct dentry *dentry, umode_t mode, dev_t rdev);
int ext2fs_setattr(struct dentry *dentry, struct iattr *iattr);
int ext2fs_iterate(struct file *file, struct dir_context *ctx);

extern const struct address_space_operations ext2fs_address_operations;
extern const struct address_space_operations ext2fs_address_operations_nolock;

$ty:(VfsInode) vfs_inode_set_mtime ($ty:((VfsInode, OSTimeSpec)) args) {
    $ty:(VfsInode) inode = args.p1;
    $ty:(OSTimeSpec) obj = args.p2;

    inode->vfs.inode_lin.i_mtime.tv_sec = obj.tv_sec;
    inode->vfs.inode_lin.i_mtime.tv_nsec = obj.tv_nsec;

    return inode;
}

$ty:(OSTimeSpec) vfs_inode_get_mtime ($ty:(VfsInode!) inode) {
    $ty:(OSTimeSpec) ret;

    ret.tv_sec = inode->vfs.inode_lin.i_mtime.tv_sec;
    ret.tv_nsec = inode->vfs.inode_lin.i_mtime.tv_sec;

    return ret;
}

$ty:(VfsInode) vfs_inode_set_ctime ($ty:((VfsInode, OSTimeSpec))args) {
    $ty:(VfsInode) inode = args.p1;
    $ty:(OSTimeSpec) obj = args.p2;

    inode->vfs.inode_lin.i_ctime.tv_sec = obj.tv_sec;
    inode->vfs.inode_lin.i_ctime.tv_nsec = obj.tv_nsec;

    return inode;
}

$ty:(OSTimeSpec) vfs_inode_get_ctime ($ty:(VfsInode!) inode) {
    $ty:(OSTimeSpec) ret;

    ret.tv_sec = inode->vfs.inode_lin.i_ctime.tv_sec;
    ret.tv_nsec = inode->vfs.inode_lin.i_ctime.tv_sec;

    return ret;
}

$ty:(VfsInode) vfs_inode_set_atime ($ty:((VfsInode, OSTimeSpec)) args) {
    $ty:(VfsInode) inode = args.p1;
    $ty:(OSTimeSpec) obj = args.p2;

    inode->vfs.inode_lin.i_atime.tv_sec = obj.tv_sec;
    inode->vfs.inode_lin.i_atime.tv_nsec = obj.tv_nsec;

    return inode;
}

$ty:(OSTimeSpec) vfs_inode_get_atime ($ty:(VfsInode!) inode) {
    $ty:(OSTimeSpec) ret;

    ret.tv_sec = inode->vfs.inode_lin.i_atime.tv_sec;
    ret.tv_nsec = inode->vfs.inode_lin.i_atime.tv_sec;

    return ret;
}

$ty:(VfsInode) vfs_inode_set_gid ($ty:((VfsInode, U32)) args) {
    $ty:(VfsInode) inode = args.p1;
    u32 obj = args.p2;

    i_gid_write (&(inode->vfs.inode_lin), obj);

    return inode;
}

u32 vfs_inode_get_gid ($ty:(VfsInode!) inode) {
    return i_gid_read (&(inode->vfs.inode_lin));
}

$ty:(VfsInode) vfs_inode_set_uid ($ty:((VfsInode, U32)) args) {
    $ty:(VfsInode) inode = args.p1;
    u32 obj = args.p2;

    i_uid_write (&(inode->vfs.inode_lin), obj);

    return inode;
}

u32 vfs_inode_get_uid ($ty:(VfsInode!) inode) {
    return i_uid_read (&(inode->vfs.inode_lin));
}

$ty:(VfsInode) vfs_inode_set_nlink ($ty:((VfsInode, U32)) args) {
    VfsInode *inode = args.p1;
    u32 obj = args.p2;

    set_nlink (&(inode->vfs.inode_lin), obj);

    return inode;
}

$ty:(VfsIno) vfs_inode_get_ino2 ($ty:(((VfsInode take fs)!)) inode) {
    return inode->vfs.inode_lin.i_ino;
}

$ty:(VfsMode) vfs_inode_get_mode2 ($ty:(((VfsInode take fs)!)) inode) {
    return inode->vfs.inode_lin.i_mode;
}

#define INODE_GETTER(field) \
u32 vfs_inode_get_##field ($ty:(VfsInode!) inode)\
{\
	return inode->vfs.inode_lin.i_##field;\
}

#define INODE_SETTER(field) \
$ty:(VfsInode) vfs_inode_set_##field($ty:((VfsInode, U32)) args)\
{\
	args.p1->vfs.inode_lin.i_##field = args.p2;\
    return args.p1; \
}

INODE_GETTER(flags)
INODE_GETTER(ino)
INODE_GETTER(nlink)
INODE_GETTER(mode)

INODE_SETTER(flags)
INODE_SETTER(ino)
INODE_SETTER(mode)


$ty:(VfsSize) vfs_inode_get_size ($ty:(VfsInode!) inode) {
    return i_size_read (&(inode->vfs.inode_lin));
}

$ty:(VfsInode) vfs_inode_set_size ($ty:((VfsInode, VfsSize)) args) {
    i_size_write (&args.p1->vfs.inode_lin, args.p2);
    return args.p1;
}

$ty:(VfsMemoryMap) vfs_inode_get_mapping ($ty:(VfsInode!) inode) {
    return inode->vfs.inode_lin.i_mapping;
}

$ty:(#VfsDevice) vfs_inode_get_device ($ty:(VfsInode!) inode) {
    return inode->vfs.inode_lin.i_rdev;
}

#define INODE_OP_HELPER(what, name, osname)                             \
    if (cogent_ops.name.tag == TAG_ENUM_None) {                         \
        inode->vfs.what##ops.osname = NULL;                             \
    } else {                                                            \
        inode->vfs.what##ops.osname = ext2fs_##name;                    \
        inode->vfs.cogent_##what##ops.name = (int)cogent_ops.name.Some; \
    };

#define INODE_OP_HELPER_GENERIC(what, name, osname, generic)    \
    if (cogent_ops.name.tag == TAG_ENUM_None) {                 \
        inode->vfs.what##ops.osname = NULL;                     \
    } else {                                                    \
        inode->vfs.what##ops.osname = generic;                  \
    };

$ty:(VfsInode) vfs_inode_set_ops ($ty:((VfsInode, VfsInodeOperations!)) args) {
    VfsInode* inode = args.p1;
    VfsInodeOperations cogent_ops = args.p2;


    INODE_OP_HELPER (i, create, create)

        // only one lookup function supported, otherwise we run
        // into recursive types within COGENT, which are presently
        // disallowed
        if (cogent_ops.can_lookup.boolean) {
            inode->vfs.iops.lookup = ext2fs_lookup;
        } else {
            inode->vfs.iops.lookup = NULL;
        }

    if (cogent_ops.can_mkdir.boolean) {
        inode->vfs.iops.mkdir = ext2fs_mkdir;
    } else {
    	inode->vfs.iops.mkdir = NULL;
    }

    INODE_OP_HELPER (i, link, link)
	INODE_OP_HELPER (i, unlink, unlink)
	// INODE_OP_HELPER (i, mkdir, mkdir)
	INODE_OP_HELPER (i, rmdir, rmdir)
	INODE_OP_HELPER (i, rename, rename)
	INODE_OP_HELPER (i, mknod, mknod)

        INODE_OP_HELPER_GENERIC (i, setattr, setattr, ext2fs_setattr)

	// these have no actual COGENT interface defined
	// we just basically test if they're null or not
	// INODE_OP_HELPER (i, symlink, symlink)
	// INODE_OP_HELPER (i, readlink, readlink)
	// INODE_OP_HELPER (i, followlink, follow_link)
	// INODE_OP_HELPER (i, putlink, put_link)

        return inode;
}

#include <linux/version.h>

$ty:(VfsInode) vfs_inode_set_fileops ($ty:((VfsInode, VfsFileOperations!)) args) {
    VfsInode* inode = args.p1;
    VfsFileOperations cogent_ops = args.p2;

    INODE_OP_HELPER (f, iterate, iterate)

        INODE_OP_HELPER_GENERIC (f, llseek, llseek, generic_file_llseek)
        INODE_OP_HELPER_GENERIC (f, open, open, generic_file_open)
        INODE_OP_HELPER_GENERIC (f, mmap, mmap, generic_file_mmap)
        INODE_OP_HELPER_GENERIC (f, fsync, fsync, generic_file_fsync)

        // TODO: don't hardcode these -- expose some COGENT interface
        // see platform.h
        //
        // check read specially
        if (cogent_ops.read.tag == TAG_ENUM_Some) {
            if (cogent_ops.read.Some == FUN_ENUM_vfs_default_read_dir) {
	        inode->vfs.fops.read = generic_read_dir;
            } else {
    		inode->vfs.fops.splice_read = generic_file_splice_read;


#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 16, 0)
#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 0, 0)
    		inode->vfs.fops.read = new_sync_read;
#endif
    		inode->vfs.fops.read_iter = generic_file_read_iter;
#else
    		inode->vfs.fops.aio_read = generic_file_aio_read;
    		inode->vfs.fops.read = do_sync_read;
#endif
            }
        } else {
            inode->vfs.fops.read = NULL;

#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 16, 0)
            inode->vfs.fops.read_iter = NULL;
#endif
        }

    // check write specially
    if (cogent_ops.write.tag == TAG_ENUM_Some) {
#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 16, 0)
#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 0, 0)
        inode->vfs.fops.write = new_sync_write;
#endif
        inode->vfs.fops.write_iter = generic_file_write_iter;
        inode->vfs.fops.splice_write = iter_file_splice_write;
#else
        inode->vfs.fops.aio_write = generic_file_aio_write;
        inode->vfs.fops.write = do_sync_write;
        inode->vfs.fops.splice_write = generic_file_splice_write;
#endif
    } else {
    	inode->vfs.fops.write = NULL;

#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 16, 0)
    	inode->vfs.fops.write_iter = NULL;
#endif
    }

    // TODO: expose address space interface too?
    if (cogent_ops.read.tag == TAG_ENUM_Some ||
        cogent_ops.write.tag == TAG_ENUM_Some) {

    	// set address space operations if necessary
    	inode->vfs.inode_lin.i_mapping->a_ops = &ext2fs_address_operations_nolock;
    } else {
    	inode->vfs.inode_lin.i_mapping->a_ops = NULL;
    }

    return inode;
}

$ty:(VfsInode) vfs_inode_set_blocks($ty:((VfsInode, U64)) args)
{
    VfsInode *inode = args.p1;
    inode->vfs.inode_lin.i_blocks = args.p2;
    return inode;
}

$ty:(VfsInode) vfs_inode_set_bytes($ty:((VfsInode, U16)) args)
{
    VfsInode *inode = args.p1;
    inode->vfs.inode_lin.i_bytes = args.p2;
    return inode;
}

u64 vfs_inode_get_blocks($ty:((VfsInode!)) inode)
{
    return inode->vfs.inode_lin.i_blocks;
}

u16 vfs_inode_get_bytes($ty:((VfsInode!)) inode)
{
    return inode->vfs.inode_lin.i_bytes;
}

$ty:(VfsInode) vfs_inode_dec_nlink ($ty:(VfsInode) inode) {
    inode_dec_link_count (&(inode->vfs.inode_lin));
    return inode;
}

$ty:(VfsInode) vfs_inode_inc_nlink ($ty:(VfsInode) inode) {
    inode_inc_link_count (&(inode->vfs.inode_lin));
    return inode;
}

$ty:(SysState) vfs_inode_bad ($ty:((#{ex: SysState, inode: VfsInode})) args) {
    args.inode->vfs.inode_lin.i_private = NULL; // no longer freeable from COGENT (take fs)
    // FIXME: oh shit actually we need a lock in private so that we
    // don't try to free when fs is taken
    //
    // TODO: replace i_private with another field in VfsInode instead

    printk ("vfs_inode_bad: iget_failed %p ino %lu\n", args.inode, args.inode->vfs.inode_lin.i_ino);
    iget_failed (&(args.inode->vfs.inode_lin));

    return args.ex;
}

$ty:(SysState) vfs_inode_bad_taken ($ty:((#{ex: SysState, inode: VfsInode take fs})) args) {
    args.inode->vfs.inode_lin.i_private = NULL; // no longer freeable from COGENT (take fs)

    printk ("vfs_inode_bad_taken: iget_failed %p ino %lu\n", args.inode, args.inode->vfs.inode_lin.i_ino);
    iget_failed (&(args.inode->vfs.inode_lin));

    return args.ex;
}

$ty:(VfsInode) vfs_inode_make_bad ($ty:(VfsInode) inode) {
    make_bad_inode(&(inode->vfs.inode_lin));
    return inode;
}

// re-entrant; write_inode, write_pages, drop_inode
// FIXME: doesn't have to be, if we ihold before we do any COGENT
$ty:(SysState) vfs_inode_put ($ty:((#{ex: SysState, inode: VfsInode})) args) {
    args.inode->vfs.inode_lin.i_private = 1; // mark as now being freeable from COGENT

    // printk ("vfs_inode_put: iput %p ino %d\n", &(args.inode->vfs.inode_lin), args.inode->vfs.inode_lin.i_ino);

    iput (&(args.inode->vfs.inode_lin));

    return args.ex;
}

$ty:(VfsInode) vfs_inode_unlock_new ($ty:(VfsInode) inode) {
    inode->vfs.inode_lin.i_private = 1; // mark as now being freeable from COGENT

    // printk ("vfs_inode_unlock: unlock %p ino %d\n", inode, inode->vfs.inode_lin.i_ino);

    unlock_new_inode (&(inode->vfs.inode_lin));
    return inode;
}

$ty:(VfsInode) vfs_inode_unlock ($ty:(VfsInode) inode) {
    spin_unlock(&(inode->vfs.inode_lin.i_lock));
    return inode;
}

$ty:(VfsInode) vfs_inode_lock ($ty:(VfsInode) inode) {
    spin_lock(&(inode->vfs.inode_lin.i_lock));
    return inode;
}

$ty:(R (SysState, VfsInode take fs) SysState) vfs_inode_new ($ty:(SysState) ex) {
$ty:(R (SysState, VfsInode take fs) SysState) ret;

    struct inode* inode = new_inode (ex->sb);
    if (!inode) {
        ret.tag = TAG_ENUM_Error;
        ret.Error = ex;
    } else {
        // printk ("vfs_inode_new: have %p\n", inode);

    	// convert it
        VfsInode *vfs_inode = EXT2_I (inode);

        // make fops, iops point inside
        inode->i_op = &(vfs_inode->vfs.iops);
        inode->i_fop = &(vfs_inode->vfs.fops);


        ret.tag = TAG_ENUM_Success;
        ret.Success.p1 = ex;
        ret.Success.p2 = vfs_inode;
    }

    return ret;
}

// vfs_inode_get: (SysState, VfsIno) -> (SysState, <New VfsInode take fs | Existing VfsInode | None ()>)
$ty:((SysState, <New (VfsInode take fs) | Existing VfsInode | None ()>)) vfs_inode_get ($ty:((SysState, VfsIno)) args) {
$ty:((SysState, <New (VfsInode take fs) | Existing VfsInode | None ()>)) ret = { .p1 = args.p1 };
    struct inode *inode;
    int err = 0;

    inode = iget_locked (args.p1->sb, args.p2);

    if (unlikely (!inode)) {
    	printk ("failed iget_locked on inode %d\n", args.p2);

    	ret.p2.tag = TAG_ENUM_None;
    	return ret;
    }

    VfsInode *cogent_inode = EXT2_I (inode);

    // printk ("vfs_inode_get: iget_locked gave %p ino %d\n", inode, inode->i_ino);

    if (!(inode->i_state & I_NEW)) {
    	ret.p2.tag = TAG_ENUM_Existing;
    	ret.p2.Existing = cogent_inode;

    	// printk ("vfs_inode_get: was not I_NEW\n");

    	return ret;
    }

    inode->i_private = NULL; // can't free from COGENT yet

    // make fops, iops point inside
    inode->i_op = &(cogent_inode->vfs.iops);
    inode->i_fop = &(cogent_inode->vfs.fops);

    ret.p2.tag = TAG_ENUM_New;
    ret.p2.New = cogent_inode;

    return ret;
}

// re-rentrant, writepages
// TODO: make not re-entrant; involves a lot of copy-paste
$ty:(VfsInode) vfs_inode_sync_metadata ($ty:(VfsInode) inode) {

    inode->vfs.inode_lin.i_mapping->a_ops = &ext2fs_address_operations_nolock;
    sync_inode_metadata(&(inode->vfs.inode_lin), 1);
    inode->vfs.inode_lin.i_mapping->a_ops = &ext2fs_address_operations;

    return inode;
}
