/*
 * Copyright 2016, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

$esc:(#include <adt.h>)
$esc:(#include <wrapper.h>)

#include <abstract.h>
#include <c/linux/abstract-defns.h> /* In lib gum */
#include <generated.c>

/*
 *  EXT2_I: gets the container COGENT structure, given the inode field
 *
 *  Note: This function needs to be define here before all the includes,
 *        as there are references to this function sprinkled all over the
 *        the place.
 */
static inline VfsInode* EXT2_I(struct inode *inode)
{
    VfsInodeAbstract *abstract = container_of(inode, VfsInodeAbstract, inode_lin);
    return container_of(abstract, VfsInode, vfs);
}

#include <gum/anti/common.ac>
#include <gum/anti/seq.ac>
#include <gum/anti/iterator.ac>
#include <gum/anti/wordarray.ac>
#include <gum/anti/array.ac>
#include <gum/anti/uarray.ac>
#include <gum/anti/dls.ac>
#include <gum/anti/os.ac>
#include <gum/anti/ospage.ac>
#include <gum/anti/osbuffer.ac>
#include <plat/linux/alloc.ac>
#include <plat/linux/vfs.ac>
#include <plat/linux/inode.ac>

extern struct kmem_cache *ext2fs_inode_slab;
extern const struct super_operations ext2fs_super_operations;


/* when we release an inode to the real world, we provide all operations must lock
 * since we won't be called from within COGENT anymore
 */
void release_inode_addrspace(struct inode* inode)
{
    WARN_ON(inode->i_state & I_NEW);

    if (inode->i_mapping->a_ops == &ext2fs_address_operations_nolock) {
        inode->i_mapping->a_ops = &ext2fs_address_operations;
    }
}

void take_inode_addrspace(struct inode* inode) {
    if (inode->i_mapping->a_ops == &ext2fs_address_operations) {
        inode->i_mapping->a_ops = &ext2fs_address_operations_nolock;
    }
}

/* can be called async */
int ext2fs_write_inode_nolock(struct inode *inode, struct writeback_control *wbc)
{
    Ext2State *state = inode->i_sb->s_fs_info;
    VfsInode *vfs_inode = EXT2_I(inode);
    int err = 0;
    $ty:(RR #{ex: SysState, state: FsState, inode: VfsInode} () (U32)) iwrite_ret;

    if (IS_ERR(inode)) {
        return -EIO;
    }

    bool_t sync = {.boolean = wbc->sync_mode == WB_SYNC_ALL };

    $ty:(#{ex: SysState, state: FsState, inode: VfsInode, sync: Bool}) iwrite_args = {
        .ex = state,
        .state = state->priv,
        .inode = vfs_inode,
        .sync = sync
    };

    iwrite_ret = fsop_inode_write(iwrite_args);
    WARN_ON(inode->i_state & I_NEW);

    if (iwrite_ret.p2.tag == TAG_ENUM_Error) {
        err = -((int)iwrite_ret.p2.Error);
        printk("ext2fs_write_inode failed with error %d\n", err);
    }

    return err;
}

int ext2fs_write_inode(struct inode *inode, struct writeback_control *wbc)
{
    Ext2State *state = inode->i_sb->s_fs_info;
    int err;

    /************ critical section begin ************/
    // ihold (inode);
    // atomic_inc_(&inode->i_count) -- FIXME: do we need this?
    down(&state->iop_lock);
    err = ext2fs_write_inode_nolock(inode, wbc);
    up(&state->iop_lock);
    // atomic_dec_(&inode->i_count)
    // iput (inode);
    /************  critical section end  ************/

    return err;
}

/* CALLER MUST LOCK */
void ext2fs_truncate(struct inode *inode, loff_t offset)
{
    Ext2State *state = inode->i_sb->s_fs_info;
    VfsInode *vfs_inode = EXT2_I (inode);
    $ty:((SysState, FsState, VfsInode, U64)) truncate_args = {
        .p1 = state,
        .p2 = state->priv,
        .p3 = vfs_inode,
        .p4 = (u64)offset
    };

    fsop_inode_truncate(truncate_args);
    WARN_ON(inode->i_state & I_NEW);
}

/* CALLER MUST LOCK */
int ext2fs_can_truncate(struct inode *inode)
{
    Ext2State *state = inode->i_sb->s_fs_info;
    VfsInode *vfs_inode = EXT2_I(inode);
    int err = 0;
    $ty:(((SysState, FsState), R () U32)) can_truncate_res;
    $ty:((SysState, FsState, VfsInode!)) can_truncate_args = {
        .p1 = state,
        .p2 = state->priv,
        .p3 = vfs_inode
    };

    can_truncate_res = fsop_can_truncate(can_truncate_args);
    WARN_ON (inode->i_state & I_NEW);

    if (can_truncate_res.p2.tag == TAG_ENUM_Error) {
        err = -((int)can_truncate_res.p2.Error);
    }

    return err;
}

/* TODO: would be nice to hook into COGENT */
int ext2fs_setattr(struct dentry *dentry, struct iattr *iattr)
{
    struct inode *inode = dentry->d_inode;
    Ext2State *state = inode->i_sb->s_fs_info;
    int error;

$escstm:(#if LINUX_VERSION_CODE > KERNEL_VERSION(4,9,0))
    error = setattr_prepare(dentry, iattr);
$escstm:(#else)
    error = inode_change_ok(inode, iattr);
$escstm:(#endif)
    if (error) {
        return error;
    }

    /* handle size change (truncating as required) */
    if (iattr->ia_valid & ATTR_SIZE && iattr->ia_size != inode->i_size) {
        loff_t newsize = iattr->ia_size;

        /************ critical section begin ************/
        ihold(inode);
        down(&state->iop_lock);

        error = ext2fs_can_truncate (inode);
        if (error) {
            up(&state->iop_lock);
            iput(inode);

            return error;
        }

        /* wait for direct I/O to complete */
        inode_dio_wait(inode);

        /* zero the blocks(?) */
        error = block_truncate_page(inode->i_mapping, newsize, ext2fs_get_block);
        if (error) {
            up(&state->iop_lock);
            iput(inode);

            return error;
        }

        /* truncate pagecache, and set i_size */
        truncate_setsize(inode, newsize);

        /* go and truncate it */
        ext2fs_truncate(inode, newsize);

        up(&state->iop_lock);
        iput(inode);
        /************  critical section end  ************/

        /* XXX: yuck, this should be in COGENT */
$escstm:(#if LINUX_VERSION_CODE < KERNEL_VERSION(4,12,0))
        inode->i_mtime = inode->i_ctime = CURRENT_TIME_SEC;
$escstm:(#else)
        inode->i_mtime = inode->i_ctime = current_time(inode);
$escstm:(#endif)
        if (inode_needs_sync(inode)) {
            sync_mapping_buffers(inode->i_mapping);
            sync_inode_metadata(inode, 1);
        } else {
            mark_inode_dirty(inode);
        }
    }

    /* handle any other attribute changes (remember, they may be non-exclusive) */
    setattr_copy(inode, iattr);

    /* handle mode change */
    if (iattr->ia_valid & ATTR_MODE) {
        error = posix_acl_chmod(inode, inode->i_mode);
    }

    /* mark as dirty, so we save our changes later */
    mark_inode_dirty(inode);

    return error;
}


/* called when refcount is zero (from iput) */
void ext2fs_evict_inode_nolock(struct inode *inode)
{
    Ext2State *state = inode->i_sb->s_fs_info;
    VfsInode *vfs_inode = EXT2_I(inode);
    bool_t want_delete = { .boolean = !inode->i_nlink && !is_bad_inode(inode) };

    /* remove all pages from pagecache relating to this inode */
    truncate_inode_pages(&inode->i_data, 0);

    /*
     * FIXME: if we want quota support, may need to reorganise
     * this or expose some more VFS stuff to COGENT
     */
    if (want_delete.boolean) {
        /* setup for writing if required */
        sb_start_intwrite (inode->i_sb);
        /* printk ("cogent: WANT DELETE FOR INODE %d\n", inode->i_ino); */
    }

    $ty:((SysState, FsState, VfsInode, Bool)) evict_args = ($ty:((SysState, FsState, VfsInode, Bool))){
        .p1 = state,
        .p2 = state->priv,
        .p3 = vfs_inode,
        .p4 = want_delete
    };

    fsop_inode_evict(evict_args);
    WARN_ON(inode->i_state & I_NEW);

    /* invalidate indirect blocks */
    invalidate_inode_buffers(inode);
    clear_inode(inode);

    $ty:((SysState, FsState, VfsInode take fs)) free_args = {
        .p1 = state,
        .p2 = state->priv,
        .p3 = vfs_inode,
    };

    if (want_delete.boolean) {
        fsop_inode_free(free_args);
        WARN_ON(inode->i_state & I_NEW);
        sb_end_intwrite(inode->i_sb);
    }
    /* printk ("cogent: nlink = %d\n", inode->i_nlink); */
}

void ext2fs_evict_inode(struct inode *inode)
{
    Ext2State *state = inode->i_sb->s_fs_info;

    /************ critical section begin ************/
    /* ihold (inode); */
    down(&state->iop_lock);
    ext2fs_evict_inode_nolock(inode);
    up(&state->iop_lock);
    /* iput(inode); */
    /************  critical section end  ************/
}


int ext2fs_mknod(struct inode * dir, struct dentry *dentry, umode_t mode, dev_t rdev)
{
    Ext2State *state = dir->i_sb->s_fs_info;
    VfsInode *vfs_inode = EXT2_I (dir);
    int err = 0;
    $ty:(RR (SysState, FsState, VfsInode) VfsInode U32) mknod_res;


    /* NOTE:We use WordArray_u8 instead of $ty:(WordArray U8) because we do not want the
      cogent compiler to use the pointer type. We want to allocate the wordarray on the
      stack */
    WordArray_u8 name_array = {.len = dentry->d_name.len, .values = (u8*)dentry->d_name.name };

    $ty:((SysState, FsState, VfsInode, CString!, VfsMode, #VfsDevice)) mknod_args = {
        .p1 = state,
        .p2 = state->priv,
        .p3 = vfs_inode,
        .p4 = &name_array,
        .p5 = mode,
        .p6 = rdev
    };

    /************ critical section begin ************/
    ihold(dir);
    down(&state->iop_lock);

    mknod_res = fsop_inode_mknod(mknod_args);
    WARN_ON(dir->i_state & I_NEW);

    if (mknod_res.p2.tag == TAG_ENUM_Error) {
        err = -((int)mknod_res.p2.Error);
    } else {
        /* new inode */
        struct inode* inode = &mknod_res.p2.Success->vfs.inode_lin;
        release_inode_addrspace(inode);
        d_instantiate(dentry, inode);
    }

    up(&state->iop_lock);
    iput(dir);
    /************ critical section begin ************/

    return err;
}


int ext2fs_link(struct dentry * old_dentry, struct inode * dir, struct dentry *dentry)
{
    int err = 0;
    Ext2State *state = dir->i_sb->s_fs_info;

    struct inode * src_inode = old_dentry->d_inode;
    VfsInode * vfs_inode = EXT2_I (src_inode);

    VfsInode * vfs_parent = EXT2_I (dir);

    /* NOTE:We use WordArray_u8 instead of $ty:(WordArray U8) because we do not want the
      cogent compiler to use the pointer type. We want to allocate the wordarray on the
      stack */
    WordArray_u8 name_array = {.len = dentry->d_name.len, .values = (u8*)dentry->d_name.name };
    $ty:(RR (SysState, FsState, VfsInode, VfsInode) () U32) link_ret;

    $ty:((SysState, FsState, VfsInode, VfsInode, CString!)) link_args = {
        .p1 = state,
        .p2 = state->priv,
        .p3 = vfs_parent,
        .p4 = vfs_inode,
        .p5 = &name_array
    };

    /*
     * take a ref now, in case:
     * a) we add it to dcache; it requires we already take a ref for it (dumb API if you ask me)
     * b) someone iputs it while we're linking it, and then we free it? is this even possible?
     */

    /************ critical section begin ************/
    ihold(src_inode);
    ihold(dir);
    down(&state->iop_lock);

    link_ret = fsop_dir_link(link_args);
    WARN_ON(src_inode->i_state & I_NEW);
    WARN_ON(dir->i_state & I_NEW);

    up(&state->iop_lock);
    iput(dir);
    /************  critical section end  ************/

    if (link_ret.p2.tag == TAG_ENUM_Success) {
        d_instantiate(dentry, src_inode);
    } else {
        /* put the ref back, since we failed.
         * should NOT invoke a free, unless dir_link does something funny
         */
        iput(src_inode);
        err = -((int)link_ret.p2.Error);
    }

    return err;
}

int ext2fs_unlink(struct inode * dir, struct dentry * dentry)
{
    struct inode* inode = dentry->d_inode;
    Ext2State *state = dir->i_sb->s_fs_info;
    VfsInode* vfs_inode = EXT2_I (inode);
    VfsInode* vfs_dir_inode = EXT2_I (dir);
    int err = 0;

    /* NOTE:We use WordArray_u8 instead of $ty:(WordArray U8) because we do not want the
      cogent compiler to use the pointer type. We want to allocate the wordarray on the
      stack */
    WordArray_u8 name_array = {.len = dentry->d_name.len, .values = (u8*)dentry->d_name.name };

    $ty:(RR (SysState, FsState, VfsInode, VfsInode) () U32) unlink_ret;

    $ty:((SysState, FsState, VfsInode, VfsInode, CString!)) unlink_args = {
        .p1 = state,
        .p2 = state->priv,
        .p3 = vfs_dir_inode,
        .p4 = vfs_inode,
        .p5 = &name_array
    };


    /************ critical section begin ************/
    ihold(inode);
    ihold(dir);
    down(&state->iop_lock);

    unlink_ret = fsop_dir_unlink(unlink_args);
    WARN_ON(dir->i_state & I_NEW);
    WARN_ON(inode->i_state & I_NEW);

    up(&state->iop_lock);
    iput(dir);
    iput(inode);
    /************  critical section end  ************/

    if (unlink_ret.p2.tag == TAG_ENUM_Error) {
        err = -((int)unlink_ret.p2.Error);
    }

    return err;
}

$esc:(#if LINUX_VERSION_CODE < KERNEL_VERSION(4,4,0))
int ext2fs_rename(struct inode * old_dir, struct dentry * old_dentry,
                  struct inode * new_dir, struct dentry * new_dentry)
{
    int err = 0;
    Ext2State *state = old_dir->i_sb->s_fs_info;

    // old_dir -> src_dir
    // new_dir -> dest_dir OR if they're the same
    //
    // src_inode -> old_dentry->d_inode
    // src_name -> old_dentry->d_name
    //
    // dest_inode -> new_dentry->d_inode if we're renaming over an existing link
    // dest_name -> new_dentry->d_name

    VfsInode* src_dir = EXT2_I(old_dir);
    VfsInode* dest_dir = EXT2_I(new_dir);

    VfsInode* src_inode = EXT2_I(old_dentry->d_inode);
    struct inode *new_inode = new_dentry->d_inode;


    /* NOTE:We use WordArray_u8 instead of $ty:(WordArray U8) because we do not want the
      cogent compiler to use the pointer type. We want to allocate the wordarray on the
      stack */
    WordArray_u8 src_name_array = {.len = old_dentry->d_name.len, .values = (u8*)old_dentry->d_name.name };
    WordArray_u8 dest_name_array = {.len = new_dentry->d_name.len, .values = (u8*)new_dentry->d_name.name };
    $ty:(VfsRenameDirs) dirs;
    $ty:(Option VfsInode) option_dest;
    $ty:(RR (SysState, FsState, VfsRenameContext) () U32) rename_ret;

    /* construct VfsRenameDirsDiff, if required */
    if (src_dir != dest_dir) {
        dirs.tag = TAG_ENUM_SrcDest;
        dirs.SrcDest.src_dir = src_dir;
        dirs.SrcDest.dest_dir = dest_dir;

    } else {
        dirs.tag = TAG_ENUM_Dest;
        dirs.Dest = dest_dir;
    }

    /* construction option type for destination inode */
    if (new_inode) {
        VfsInode* dest_inode = EXT2_I (new_inode);
        option_dest.Some = dest_inode;
        option_dest.tag = TAG_ENUM_Some;
    } else {
        option_dest.tag = TAG_ENUM_None;
    }

    /* construct VfsRenameContext */
    $ty:(VfsRenameContext) rename_ctx = {
        // .dirs = dirs,

        .src_inode = src_inode,
        .src_name = &src_name_array,

        // .dest_inode = option_dest,
        .dest_name = &dest_name_array
    };

    rename_ctx.dirs = dirs;
    rename_ctx.dest_inode = option_dest;

    $ty:((SysState, FsState, VfsRenameContext)) rename_args = {
        .p1 = state,
        .p2 = state->priv,
        .p3 = rename_ctx
    };

    /************ critical section begin ************/
    ihold(old_dir);
    ihold(new_dir);
    ihold(old_dentry->d_inode);
    if (new_dentry->d_inode) {
        ihold(new_dentry->d_inode);
    }

    down(&state->iop_lock);

    rename_ret = fsop_rename(rename_args);
    WARN_ON(old_dir->i_state & I_NEW);
    WARN_ON(new_dir->i_state & I_NEW);
    WARN_ON(old_dentry->d_inode->i_state & I_NEW);

    if (new_dentry->d_inode) {
        WARN_ON(new_dentry->d_inode->i_state & I_NEW);
    }

    up(&state->iop_lock);

    if (new_dentry->d_inode) {
        iput(new_dentry->d_inode);
    }
    iput(old_dentry->d_inode);
    iput(new_dir);
    iput(old_dir);
    /************  critical section end  ************/

    if (rename_ret.p2.tag == TAG_ENUM_Error) {
        err = -((int)rename_ret.p2.Error);
    }

    return err;
}

$esc:(#else)

int ext2fs_rename(struct inode * old_dir, struct dentry * old_dentry,
                  struct inode * new_dir, struct dentry * new_dentry,
                  unsigned int flags)
{
    int err = 0;
    Ext2State *state = old_dir->i_sb->s_fs_info;

    // old_dir -> src_dir
    // new_dir -> dest_dir OR if they're the same
    //
    // src_inode -> old_dentry->d_inode
    // src_name -> old_dentry->d_name
    //
    // dest_inode -> new_dentry->d_inode if we're renaming over an existing link
    // dest_name -> new_dentry->d_name

    VfsInode* src_dir = EXT2_I(old_dir);
    VfsInode* dest_dir = EXT2_I(new_dir);

    VfsInode* src_inode = EXT2_I(old_dentry->d_inode);
    struct inode *new_inode = new_dentry->d_inode;


    /* NOTE:We use WordArray_u8 instead of $ty:(WordArray U8) because we do not want the
      cogent compiler to use the pointer type. We want to allocate the wordarray on the
      stack */
    WordArray_u8 src_name_array = {.len = old_dentry->d_name.len, .values = (u8*)old_dentry->d_name.name };
    WordArray_u8 dest_name_array = {.len = new_dentry->d_name.len, .values = (u8*)new_dentry->d_name.name };
    $ty:(VfsRenameDirs) dirs;
    $ty:(Option VfsInode) option_dest;
    $ty:(RR (SysState, FsState, VfsRenameContext) () U32) rename_ret;

    /* construct VfsRenameDirsDiff, if required */
    if (src_dir != dest_dir) {
        dirs.tag = TAG_ENUM_SrcDest;
        dirs.SrcDest.src_dir = src_dir;
        dirs.SrcDest.dest_dir = dest_dir;

    } else {
        dirs.tag = TAG_ENUM_Dest;
        dirs.Dest = dest_dir;
    }

    /* construction option type for destination inode */
    if (new_inode) {
        VfsInode* dest_inode = EXT2_I (new_inode);
        option_dest.Some = dest_inode;
        option_dest.tag = TAG_ENUM_Some;
    } else {
        option_dest.tag = TAG_ENUM_None;
    }

    /* construct VfsRenameContext */
    $ty:(VfsRenameContext) rename_ctx = {
        // .dirs = dirs,

        .src_inode = src_inode,
        .src_name = &src_name_array,

        // .dest_inode = option_dest,
        .dest_name = &dest_name_array
    };

    rename_ctx.dirs = dirs;
    rename_ctx.dest_inode = option_dest;

    $ty:((SysState, FsState, VfsRenameContext)) rename_args = {
        .p1 = state,
        .p2 = state->priv,
        .p3 = rename_ctx
    };

    /************ critical section begin ************/
    ihold(old_dir);
    ihold(new_dir);
    ihold(old_dentry->d_inode);
    if (new_dentry->d_inode) {
        ihold(new_dentry->d_inode);
    }

    down(&state->iop_lock);

    rename_ret = fsop_rename(rename_args);
    WARN_ON(old_dir->i_state & I_NEW);
    WARN_ON(new_dir->i_state & I_NEW);
    WARN_ON(old_dentry->d_inode->i_state & I_NEW);

    if (new_dentry->d_inode) {
        WARN_ON(new_dentry->d_inode->i_state & I_NEW);
    }

    up(&state->iop_lock);

    if (new_dentry->d_inode) {
        iput(new_dentry->d_inode);
    }
    iput(old_dentry->d_inode);
    iput(new_dir);
    iput(old_dir);
    /************  critical section end  ************/

    if (rename_ret.p2.tag == TAG_ENUM_Error) {
        err = -((int)rename_ret.p2.Error);
    }

    return err;
}
$esc:(#endif)                   /* LINUX_VERSION_CODE */


int ext2fs_create(struct inode * dir, struct dentry * dentry, umode_t mode, bool excl)
{
    struct inode* inode;
    Ext2State *state = dir->i_sb->s_fs_info;
    VfsInode *vfs_dir_inode = EXT2_I (dir);
    int err = 0;

    $ty:(RR (SysState, FsState, VfsInode) VfsInode U32) create_ret;
    /* NOTE:We use WordArray_u8 instead of $ty:(WordArray U8) because we do not want the
      cogent compiler to use the pointer type. We want to allocate the wordarray on the
      stack */
    WordArray_u8 name_array = {.len = dentry->d_name.len, .values = (u8*)dentry->d_name.name };

    $ty:((SysState, FsState, VfsInode, CString!, VfsMode)) create_args = {
        .p1 = state,
        .p2 = state->priv,
        .p3 = vfs_dir_inode,
        .p4 = &name_array,
        .p5 = mode
    };

    /************ critical section begin ************/
    ihold(dir);
    down(&state->iop_lock);

    create_ret = fsop_dir_create(create_args);
    WARN_ON(dir->i_state & I_NEW);

    if (create_ret.p2.tag == TAG_ENUM_Success) {
        inode = &create_ret.p2.Success->vfs.inode_lin;
        release_inode_addrspace(inode);
        d_instantiate(dentry, inode);
    } else {
        err = -((int)create_ret.p2.Error);
    }

    up(&state->iop_lock);
    iput(dir);
    /************  critical section end  ************/

    return err;
}

int ext2fs_mkdir(struct inode * dir, struct dentry * dentry, umode_t mode)
{
    struct inode* inode;
    Ext2State *state = dir->i_sb->s_fs_info;
    VfsInode *vfs_dir_inode = EXT2_I (dir);
    int err = 0;

    $ty:(RR (SysState, FsState, VfsInode) VfsInode U32) ret;
    /* NOTE:We use WordArray_u8 instead of $ty:(WordArray U8) because we do not want the
      cogent compiler to use the pointer type. We want to allocate the wordarray on the
      stack */
    WordArray_u8 name_array = {.len = dentry->d_name.len, .values = (u8*)dentry->d_name.name };

    $ty:((SysState, FsState, VfsInode, CString!, VfsMode)) args = {
        .p1 = state,
        .p2 = state->priv,
        .p3 = vfs_dir_inode,
        .p4 = &name_array,
        .p5 = mode
    };

    /************ critical section begin ************/
    ihold(dir);
    down(&state->iop_lock);

    ret = fsop_dir_mkdir(args);
    WARN_ON(dir->i_state & I_NEW);

    if (ret.p2.tag == TAG_ENUM_Success) {
        inode = &ret.p2.Success->vfs.inode_lin;
        release_inode_addrspace(inode);
        d_instantiate(dentry, inode);
    } else {
        err = -((int)ret.p2.Error);
    }

    up(&state->iop_lock);
    iput(dir);
    /************  critical section end  ************/

    return err;
}

int ext2fs_rmdir(struct inode * dir, struct dentry *dentry)
{
    int err = 0;

    Ext2State *state = dir->i_sb->s_fs_info;

    VfsInode * vfs_parent_inode = EXT2_I (dir);
    VfsInode * vfs_dir_inode = EXT2_I (dentry->d_inode);

    $ty:(RR (SysState, FsState, VfsInode, VfsInode) () U32) rmdir_ret;
    /* NOTE:We use WordArray_u8 instead of $ty:(WordArray U8) because we do not want the
      cogent compiler to use the pointer type. We want to allocate the wordarray on the
      stack */
    WordArray_u8 name_array = {.len = dentry->d_name.len, .values = (u8*)dentry->d_name.name };

    $ty:((SysState, FsState, VfsInode, VfsInode, CString!)) rmdir_args = {
        .p1 = state,
        .p2 = state->priv,
        .p3 = vfs_parent_inode,
        .p4 = vfs_dir_inode,
        .p5 = &name_array
    };

    /************ critical section begin ************/
    ihold(dir);
    ihold(dentry->d_inode);
    down(&state->iop_lock);

    rmdir_ret = fsop_dir_rmdir(rmdir_args);

    WARN_ON(dir->i_state & I_NEW);
    WARN_ON(dentry->d_inode->i_state & I_NEW);

    if (rmdir_ret.p2.tag == TAG_ENUM_Error) {
        err = -((int)rmdir_ret.p2.Error);
    }

    up(&state->iop_lock);
    iput(dentry->d_inode);
    iput(dir);
    /************  critical section end  ************/

    return err;
}

void ext2fs_put_super(struct super_block * sb)
{
    if (sb->s_fs_info) {
        Ext2State *ws = sb->s_fs_info;
        ws->sb = sb;

        if (ws->priv) {
            $ty:((#{ex: SysState, state: FsState})) unmount_args = {
                .ex = ws,
                .state = ws->priv
            };
            /************ critical section begin ************/
            down(&ws->iop_lock);

            /* we mounted at some point, tell FS to unmount and free its stuff */
            ws = fs_unmount(unmount_args);
            up(&ws->iop_lock);
            /************  critical section end  ************/
        }

        /* free our allocated state, too */
        kfree(ws);

        sb->s_fs_info = NULL;
    }
}


struct dentry *ext2fs_lookup(struct inode *dir, struct dentry *dentry, unsigned int flags)
{
    int err = 0;
    Ext2State *ws = dir->i_sb->s_fs_info;
    struct super_block *sb = dir->i_sb;
    ws->sb = sb; /* FIXME: do we actually need this? */

    VfsInode *abstract_inode = EXT2_I (dir);

    $ty:(RR #{ex: SysState, state: FsState, parent_inode: VfsInode} VfsInode U32) lookup_ret;
    /* NOTE:We use WordArray_u8 instead of $ty:(WordArray U8) because we do not want the
      cogent compiler to use the pointer type. We want to allocate the wordarray on the
      stack */
    WordArray_u8 name_array = {.len = dentry->d_name.len, .values = (u8*)dentry->d_name.name };

    $ty:((#{ex: SysState, state: FsState, parent_inode: VfsInode, name: CString!, flags: VfsFlags})) lookup_args = {
        .ex = ws,
        .state = ws->priv,
        .parent_inode = abstract_inode,
        .name = &name_array,
        .flags = flags
    };

    /************ critical section begin ************/
    ihold(dir);
    down(&ws->iop_lock);

    lookup_ret = fsop_dir_lookup(lookup_args);

    WARN_ON(dir->i_state & I_NEW);

    VfsInode* result_abstract_inode;
    struct inode* inode = NULL;

    if (lookup_ret.p2.tag == TAG_ENUM_Error) {
        err = -((int)lookup_ret.p2.Error);

        /* if no such file/directory, just splice with NULL inode */
        if (err != -ENOENT) {
            printk("ext2fs_lookup failed with error %d\n", err);
            up(&ws->iop_lock);
            iput(dir);

            return ERR_PTR (err);
        }
    } else {
        result_abstract_inode = lookup_ret.p2.Success;
        inode = &(result_abstract_inode->vfs.inode_lin);
        release_inode_addrspace(inode);
    }

    up(&ws->iop_lock);
    iput(dir);
    /************  critical section end  ************/

    return d_splice_alias(inode, dentry);
}


int ext2fs_iterate(struct file *file, struct dir_context *ctx)
{
    int err = 0;
    struct inode *dir_inode = file_inode(file);

    struct super_block *sb = dir_inode->i_sb;
    VfsInode *abstract_inode = EXT2_I (dir_inode);

    $ty:(RR #{ex: SysState, state: FsState, parent_inode: VfsInode, dirctx: VfsDirContext} () U32) iterate_ret;
    Ext2State *ws = sb->s_fs_info;

    ws->sb = sb;

    VfsDirContext cogent_ctx = {
        .os  = ctx,
        .pos = ctx->pos
    };

    $ty:((#{ex: SysState, state: FsState, parent_inode: VfsInode, dirctx: VfsDirContext})) iterate_args = {
        .ex = ws,
        .state = ws->priv,
        .parent_inode = abstract_inode,
        .dirctx = &cogent_ctx
    };

    /************ critical section begin ************/
    ihold(dir_inode);
    down(&ws->iop_lock);

    iterate_ret = fsop_dir_iterate(iterate_args);

    ctx->pos = cogent_ctx.pos;
    WARN_ON(dir_inode->i_state & I_NEW);

    if (iterate_ret.p2.tag == TAG_ENUM_Error) {
        err = -((int)iterate_ret.p2.Error);
    }

    up(&ws->iop_lock);
    iput(dir_inode);
    /************  critical section end  ************/

    return err;
}


/*
 * CALLER MUST LOCK
 * this is a helper function, NOT a top level function!
 */
int ext2fs_get_block(struct inode *inode, sector_t iblock,
    struct buffer_head *bh_result, int create)
{
    Ext2State *ws = inode->i_sb->s_fs_info;
    struct super_block *sb = inode->i_sb;
    ws->sb = sb;

    $ty:(RR (SysState, FsState, OSBuffer, VfsInode) () (U32)) getblock_ret;
    VfsInode *abstract_inode = EXT2_I (inode);
    int err = 0;

    bool_t create_bool = { .boolean = !!create };

    $ty:((#{ex: SysState, state: FsState, inode: VfsInode, blk: U32, create: Bool, buf: OSBuffer})) getblock_args = {
        .ex = ws,
        .state = ws->priv,
        .inode = abstract_inode,
        .blk = iblock,
        .create = create_bool,
        .buf = bh_result
    };

    getblock_ret = fsop_inode_get_block(getblock_args);
    /* WARN_ON(inode->i_state & I_NEW); */

    if (unlikely(getblock_ret.p2.tag == TAG_ENUM_Error)) {
        err = -((int)getblock_ret.p2.Error);
        if (err)
	    printk("ext2fs_get_block failed with error %d\n", err);
    }

    return err;
}


static int ext2fs_statfs(struct dentry * dentry, struct kstatfs * buf)
{
    struct super_block *sb = dentry->d_sb;
    Ext2State *ws = sb->s_fs_info;
    u64 fsid;

    /************ critical section begin ************/
    down(&ws->iop_lock);

    VfsExtendedInfo ei = {
        .fs_type = 0,
        .best_blocksize=0,
        .blocks_total=0,
        .blocks_free=0,
        .blocks_available=0,
        .files_total=0,
        .files_free=0,
        .max_namelen=0,
    };

    $ty:((SysState, FsState, VfsExtendedInfo take (..))) statfs_args = {
        .p1 = ws,
        .p2 = ws->priv,
        .p3 = &ei
    };

    fsop_get_extended_info(statfs_args);

    // marshall back out to kstatfs
    buf->f_type = ei.fs_type;
    buf->f_bsize = ei.best_blocksize;
    buf->f_blocks = ei.blocks_total;
    buf->f_bfree = ei.blocks_free;
    buf->f_bavail = ei.blocks_available;
    buf->f_files = ei.files_total;
    buf->f_ffree = ei.files_free;
    buf->f_namelen = ei.max_namelen;

    // UUID is set by e2fsck or at image creation time
    // however, it's an extended field, so we don't care right now
    //
    // fsid = le64_to_cpup((void *)es->s_uuid) ^
    //        le64_to_cpup((void *)es->s_uuid + sizeof(u64));
    // buf->f_fsid.val[0] = fsid & 0xFFFFFFFFUL;
    // buf->f_fsid.val[1] = (fsid >> 32) & 0xFFFFFFFFUL;

    buf->f_fsid.val[0] = 0;
    buf->f_fsid.val[1] = 0;

    up(&ws->iop_lock);
    /************  critical section end  ************/

    return 0;
}

struct inode *ext2fs_alloc_inode(struct super_block *sb)
{
    VfsInode *abstract_inode;

    // should already give us zero'd page
    abstract_inode = kmem_cache_alloc(ext2fs_inode_slab, GFP_NOFS);
    if (!abstract_inode) {
        return NULL;
    }

    return &(abstract_inode->vfs.inode_lin);
}

void ext2fs_i_callback(struct rcu_head *head)
{
    struct inode *inode = RCU_I (head);
    struct super_block *sb = inode->i_sb;

    VfsInode *abstract_inode = EXT2_I (inode);
    kmem_cache_free(ext2fs_inode_slab, abstract_inode);
}

#define MAX_OPTIONS  2

/*
 * this function should probably be split into smaller bits, but:
 *  1) allocates own driver state (gets passed to mount, gets passed back out)
 *  2) allocates options array to pass to mount
 *  3) sanity checks block size
 *  4) attempts to mount
 *  5a) if all good, we setup a pointer to the filesystem's state from our sb
 *  5b) otherwise, put the sb back, which may call fs_unmount if got far enough
 */
int ext2fs_fill_super(struct super_block *sb, void *data,
                      int silent)
{
    struct inode *root;
    int err;
    char* options = data;
    Ext2State* ws;
    int blocksize;

    $ty:(RR SysState (#{state: FsState, mountinfo: #VfsMountInfo}) U32) mount_ret;
    $ty:(RR #{ex: SysState, state: FsState} VfsInode U32) root_ret;

    ws = kmalloc(sizeof (struct Ext2State), GFP_NOFS);
    if (!ws) {
        printk("could not allocate Ext2State\n");

        err = -ENOMEM;
        goto cleanup;
    }

    sema_init(&(ws->iop_lock), 1);
    /* sema_init(&(ws->sop_lock), 1); */
    /* sema_init(&(ws->aop_lock), 1); */

    ws->sb = sb;
    ws->priv = NULL;

    sb->s_fs_info = ws;

    /* do some checks to see if the blocksize we have
     * is sensible (ie we don't have to hack around them) */
    blocksize = sb_min_blocksize(sb, BLOCK_SIZE);
    if (!blocksize) {
        printk ("block size too small; unsupported\n");

        err = -EINVAL;
        goto cleanup;
    }

    if (blocksize != BLOCK_SIZE) {
        printk ("block size not on hardware boundary; unsupported\n");

        err = -EINVAL;
        goto cleanup;
    }

    /* Copy options
     * TODO: support more than 3 options; should use List rather
     * than Array; alternatively, get length first somehow */
    /* NOTE: We use Array_WordArray_u8 instead of $ty:(Array (WordArray U8)) because we
       do not want the cogent compiler to use the pointer type. We want to
       allocate the wordarray on the stack */
    Array_WordArray_u8 cogent_options = {
        .len = 0, // updated by loop below
        .values = kmalloc(MAX_OPTIONS * sizeof ($ty:(WordArray U8)*), GFP_NOFS)
    };

    if (!cogent_options.values) {
        err = -ENOMEM;
        goto cleanup;
    }

    int i;
    char* p;
    while ((p = strsep(&options, ",")) != NULL && i < cogent_options.len) {
        if (!*p) {
            continue;
        }

        /* NOTE:We use sizeof(WordArray_u8) instead of sizeof($ty:(WordArray U8)) because we
           do not want the cogent compiler to use the pointer type.
        */
        $ty:(WordArray U8) option = kmalloc(sizeof(WordArray_u8), GFP_NOFS);
        if (!option) {
            err = -ENOMEM;

            while (i > 0) {
                kfree (cogent_options.values[i - 1]);
                i--;
            }

            goto cleanup;
        }


        option->len = strlen (p);
        option->values = (u8*)p;

        cogent_options.values[i] = option;
        cogent_options.len++;
    }

    /* attempt mount with options array, and Ext2State as "state"
     * if you need to get Ext2State back, you can get it inside
     * state */
    $ty:(#{ex: SysState, options: (Array (WordArray U8))!}) mount_args = {
        .ex = ws,
        .options = &cogent_options
    };

    mount_ret = fs_mount(mount_args);
    ws = mount_ret.p1;

    /* free temporary options array from COGENT marshalling */
    for (i = 0; i < cogent_options.len; i++) {
        kfree(cogent_options.values[i]);
    }

    /* check for mount failure */
    if (mount_ret.p2.tag == TAG_ENUM_Error) {
        printk("failed to mount\n");

        err = -mount_ret.p2.Error;
        goto cleanup;
    }


    /* copy our state pointer (which we can pass if we need
     * to unmount past this point, and give to other funcs) */
    ws->priv = mount_ret.p2.Success.state;

    /* amd copy other stuff to kernel data structure */
    sb->s_magic = mount_ret.p2.Success.mountinfo.s_magic;
    sb->s_flags = mount_ret.p2.Success.mountinfo.s_flags;
    sb->s_max_links = mount_ret.p2.Success.mountinfo.s_max_links;
    sb->s_maxbytes = mount_ret.p2.Success.mountinfo.s_maxbytes;
    sb->s_blocksize = mount_ret.p2.Success.mountinfo.s_blocksize;
    sb->s_blocksize_bits = mount_ret.p2.Success.mountinfo.s_blocksize_bits;

    sb->s_op = &ext2fs_super_operations;

    /* get the root inode */
    $ty:((#{ex: SysState, state: FsState})) get_root_args = {
        .ex = ws,
        .state = ws->priv
    };

    root_ret = fsop_get_root_inode(get_root_args);

    if (root_ret.p2.tag == TAG_ENUM_Error) {
        printk("failed to get root inode\n");

        err = -root_ret.p2.Error;
        goto cleanup;
    }

    root = &root_ret.p2.Success->vfs.inode_lin;

    /* make a dirent from it */
    sb->s_root = d_make_root(root);
    if (sb->s_root) {
        /* finished mounting */
        return 0;
    } else {
        printk("could not make root dirent from inode\n");
        err = -EINVAL;
    }

cleanup:
    printk("mount failed with error %d\n", err);
    ext2fs_put_super(sb);

    return err;
}

