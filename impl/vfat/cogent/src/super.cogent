--
-- Copyright 2017, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

include <gum/iterator.cogent>
-- Defined in common.cogent (included by iterator.cogent):
--  type ExState = U64
--  type R a b = < Success a | Error b >
--  type RR a b c = (c, R a b)
--  type Option a = < None () | Some a >

-- See the TODO file in the vfat/ directory

-- pointers are U64

type VfsDentry
type ErrPtr
type Superblock
type VfsInode

type Time = #{
  seconds:  U32,
  nanoseconds: U32
}

type SlotInfo = #{
  i_pos: U64,
  slot_off: U64,
  nr_slots: U32,
  de: U64,
  bh: U64
}

-- maybe make locks a(n abstract) type

-- ==========
-- Implemented in ac
-- ==========
get_sb: VfsInode! -> Superblock
get_name: VfsDentry! -> U64
get_version: VfsInode! -> U64
get_dhead: VfsInode! -> U64
get_head: VfsInode! -> U64
get_dir_hash: VfsInode! -> U64
get_fat_hash: VfsInode! -> U64
get_logstart: VfsInode -> (VfsInode, U32)
get_parent: VfsDentry! -> VfsDentry
get_qstr_name: U64 -> String
get_qstr_length: U64 -> U32
set_version: (VfsInode, U64) -> VfsInode
set_ipos: (VfsInode, U64) -> VfsInode
get_b_data: U64 -> U64
get_null_inode_ac: () -> VfsInode

is_err: VfsInode -> R VfsInode ErrPtr
is_dirsync_ac: VfsInode! -> Bool
is_dir_ac: VfsInode! -> Bool
is_root_den: VfsDentry! -> Bool
is_root_ino: VfsInode! -> Bool
is_nfs: VfsInode! -> Bool
is_null: all a. a! -> Bool
is_noent: ErrPtr -> R () ErrPtr
is_disconnected: VfsDentry! -> Bool

flock_buildinode: (ExState, Superblock) -> (ExState, Superblock)
funlock_buildinode: (ExState, Superblock) -> (ExState, Superblock)
ulock: (ExState, Superblock) -> ExState
slock: (ExState, Superblock) -> (ExState, Superblock)
spinode_unlock: (ExState, Superblock) -> ExState
spinode_lock: (ExState, Superblock) -> (ExState, Superblock)
spdir_lock: (ExState, Superblock) -> (ExState, Superblock)
spdir_unlock: (ExState, Superblock) -> ExState

decrementU32: U32 -> U32
incr_head_pointer: (U64, U64) -> U64
inc_nlink_ac: VfsInode -> VfsInode
set_nlink_ac: (VfsInode, U32) -> VfsInode -- check?
fat_msg_ac: (ExState, Superblock, String) -> ExState -- check?

noent_ac: () -> ErrPtr

-- too deep
drop_nlink_ac: VfsInode -> VfsInode
mark_inode_dirty_ac: VfsInode -> VfsInode
iput_ac: VfsInode -> ()
d_instantiate_ac: (VfsInode, VfsDentry) -> (VfsInode, VfsDentry) -- check comments
new_inode_ac: Superblock -> RR Superblock VfsInode ErrPtr
hlist_add_head_ac: (VfsInode, U64) -> VfsInode -- needs fixing
brelse_ac: U64 -> U64
mark_buffer_dirty_inode_ac: (VfsInode, U64) -> (VfsInode, U64)
sync_dirty_buffer_ac: (U64) -> RR U64 () ErrPtr
set_ino: (VfsInode, Superblock) -> (VfsInode, Superblock)
insert_inode_hash_ac: VfsInode -> VfsInode
clear_nlink_ac: VfsInode -> VfsInode
d_inode_ac: VfsDentry! -> VfsInode
dput_ac: VfsDentry -> ()
hlist_del_init_ac: U64 -> ()
d_splice_alias_ac: (VfsInode, VfsDentry) -> VfsDentry
d_move_ac: (VfsDentry, VfsDentry) -> (VfsDentry, VfsDentry)
d_unhashed_ac: VfsDentry -> VfsDentry
hash_32_ac: all(a). a -> U64
d_find_alias_ac: VfsInode -> (VfsInode, VfsDentry)
is_equal_den: (VfsDentry, VfsDentry) -> Bool
-- ==========

-- time stuff
set_time: (VfsInode, Time) -> VfsInode
update_am_time: VfsInode -> VfsInode
set_d_time: (VfsDentry, U64) -> VfsDentry -- check the ac function
get_current_time: ExState -> (ExState, Time) -- function possibly exists already

-- ==========
-- iteration-related functions
-- ==========
vfat_build_slots_ac: (VfsInode, U64, U32, U32, U32, Time) -> RR VfsInode (U64, U32) ErrPtr
fat_free_clusters_ac: (VfsInode, U32) -> VfsInode
fat_iget_ac: (Superblock, U64) -> RR Superblock () ErrPtr -- uses hlist_for_... macro
-- contain fat_get_entry:
deep_fat_remove_entries_ac: (VfsInode, U64, U32) -> R VfsInode VfsInode -- written below, but messed up somehow - debug later
fat_add_entries_ac: (VfsInode, U64, U32) -> RR VfsInode SlotInfo ErrPtr
fat_search_long_ac: (VfsInode, U64, U32) -> RR VfsInode SlotInfo ErrPtr
fat_dir_empty_ac: VfsInode -> R () ErrPtr
-- ==========

-- ==========
-- Other TODO
-- ==========
fat_alloc_new_dir_ac: (VfsInode, Time) -> RR VfsInode U32 ErrPtr
deep_fat_write_inode_ac: (VfsInode, U32) -> VfsInode
last_char_dot_ac: (String, U32) ->  Bool
delete_first_ac: U64 -> U64
ptr_greq_ac: (U64, U64) -> Bool
fat_fill_inode_ac: (VfsInode, U64) -> R VfsInode (VfsInode, ErrPtr)
-- ==========

del_slots_gen: #{acc: (U32, U64, U64), obsv: ()} -> GeneratorResult (U32, U64) () (U32, U64) (U32, U64, U64)
del_slots_gen #{acc = (nr_slots, de, bh), obsv = _} =
  let b_data = get_b_data bh -- bh should be obsv not in acc
  and is_greq = ptr_greq_ac (de, b_data)
  in (nr_slots > 0 && is_greq)
  | True ->
    ((nr_slots, de, bh), Yield (nr_slots, de)) -- fix params
  | False ->
    ((nr_slots, de, bh), Stop (nr_slots, de))

del_slots_cons: #{obj: (U32, U64), acc: (U32, U64, U64), obsv: ()} -> ConsumerResult () (U32, U64) (U32, U64, U64)
del_slots_cons #{obj = (nr_slots, de), acc = (_, _, bh), obsv = ()} =
  let de' = delete_first_ac de
  and nr_slots' = decrementU32 nr_slots
  in ((nr_slots', de', bh), Next ())

-- fix iteration parameters
del_slots_cog: (U32, U64, U64) -> (U64, U32)
del_slots_cog (nr_slots, bh, de) =
  let iter = iterate [(U32, U64), (), (U32, U64), (U32, U64, U64), ()]
  and ((nr_slots', de, _), _) = iter #{
    gen = del_slots_gen,
    cons = del_slots_cons,
    acc = (nr_slots, de, bh),
    obsv = ()
  }
  in (de, nr_slots')

striptail_gen: #{acc: U32, obsv: String} -> GeneratorResult U32 () U32 U32
striptail_gen #{acc = len, obsv = name} =
  if (len > 0 && last_char_dot_ac (name, len)) then (len, Yield len)
  else (len, Stop len)

striptail_cons: #{obj: U32, acc: U32, obsv: String} -> ConsumerResult () U32 U32
striptail_cons #{obj = len, acc = new_len, obsv = name} =
  let new_len = decrementU32 len in (new_len, Next ())

vfat_striptail_len_cog: U64 -> R U32 ErrPtr
vfat_striptail_len_cog qname =
  let name = get_qstr_name qname
  and len = get_qstr_length qname
  and iter = iterate [U32, (), U32, U32, String]
  and (len, _) =  iter #{
    gen = striptail_gen,
    cons = striptail_cons,
    acc = len,
    obsv = name
  }
  in (len == 0)
  | True ->
    let err_ptr = noent_ac ()
    in Error err_ptr
  | False -> Success len

add_head_cog: (ExState, VfsInode, U64) -> (ExState, VfsInode)
add_head_cog (ex, inode, i_pos) =
  is_root_ino inode ! inode
  | True -> (ex, inode)
  | False ->
    let inode_head = get_head inode ! inode
    and offset = fat_hash_cog i_pos
    and inode_head = incr_head_pointer (inode_head,offset)
    and sb = get_sb inode ! inode
    and (ex, sb) = spinode_lock (ex, sb)
    and inode = set_ipos (inode, i_pos)
    and inode = hlist_add_head_ac (inode, inode_head)
    and ex = spinode_unlock (ex, sb)
    in (ex, inode)

-- want to get rid of the one in inode.c but native fat is exporting...
fat_attach_cog: (ExState, VfsInode, U64) -> (ExState, VfsInode)
fat_attach_cog (ex, inode, i_pos) =
  let (ex, inode) = add_head_cog (ex, inode, i_pos) -- check if read only
  in is_dir_ac inode ! inode
  | True ->
    is_nfs inode ! inode
    | True ->
      let d_head = get_dhead inode ! inode
      and (inode, offset) = fat_dir_hash_cog inode
      and d_head' = d_head + offset
      and sb = get_sb inode ! inode
      and (ex, sb) = spdir_lock (ex, sb)
      and inode = hlist_add_head_ac (inode, d_head') -- check if read only
      and ex = spdir_unlock (ex, sb)
      in (ex, inode)
    | False -> (ex, inode)
  | False -> (ex, inode)

sync_inode_cog: VfsInode -> VfsInode
sync_inode_cog dir =
  let dir = update_am_time dir
  in is_dirsync_ac dir ! dir
  | True -> fat_sync_inode_cog dir
  | False -> mark_inode_dirty_ac dir

-- Original sets some things to NULL in sinfo - check if this is an issue
fat_remove_entries_cog: (ExState, VfsInode, SlotInfo) -> RR (ExState, VfsInode) () ErrPtr
fat_remove_entries_cog (ex, dir, sinfo) =
  let (de, nr_slots') = del_slots_cog (sinfo.nr_slots, sinfo.bh, sinfo.de)
  and (dir, bh') = mark_buffer_dirty_inode_ac (dir, sinfo.bh) -- check what is needed
  in is_dirsync_ac dir ! dir
  | True ->
    let (bh'', res) = sync_dirty_buffer_ac bh'
    in res
    | Success () ->
      let _ = brelse_ac bh''
      and dir = incr_version dir
      in (nr_slots' == 0)
      | True ->
        let dir = sync_inode_cog dir
        in ((ex, dir), Success ())
      | False ->
        let slot_off = sinfo.slot_off
        in deep_fat_remove_entries_ac (dir, slot_off, nr_slots')
        | Success dir ->
          let dir = sync_inode_cog dir
          in ((ex, dir), Success ())
        | Error dir ->
          let sb = get_sb dir ! dir
          and ex = fat_msg_ac (ex, sb, "Couldn't remove the long name slots")
          and dir = sync_inode_cog dir
          in ((ex, dir), Success ())
    | Error err_ptr ->
      let _ = brelse_ac bh''
      in ((ex, dir), Error err_ptr)
  | False ->
    let _ = brelse_ac bh'
    and dir = incr_version dir
    in (nr_slots' == 0)
    | True ->
      let dir = sync_inode_cog dir
      in ((ex, dir), Success ())
    | False ->
      let slot_off = sinfo.slot_off
      in deep_fat_remove_entries_ac (dir, slot_off, nr_slots')
      | Success dir ->
        let dir = sync_inode_cog dir
        in ((ex, dir), Success ())
      | Error dir ->
        let sb = get_sb dir ! dir
        and ex = fat_msg_ac (ex, sb, "Couldn't remove the long name slots")
        and dir = sync_inode_cog dir
        in ((ex, dir), Success ())

fat_hash_cog: U64 -> U64
fat_hash_cog ipos =
  hash_32_ac [U64] ipos

-- fairly sure this only reads but need to check what MSDOS_I does for sure
fat_dir_hash_cog: VfsInode -> (VfsInode, U64)
fat_dir_hash_cog inode =
    let (inode, logstart) = get_logstart inode
    in (inode, hash_32_ac [U32] logstart)

fat_detach_cog: (ExState, VfsInode) -> (ExState, VfsInode)
fat_detach_cog (ex, inode) =
  let sb = get_sb inode ! inode
  and (ex, sb) = spinode_lock (ex, sb)
  and fat_hash = get_fat_hash inode ! inode
  and inode = set_ipos (inode, 0)
  and _ = hlist_del_init_ac fat_hash
  and ex = spinode_unlock (ex, sb)
  in is_dir_ac inode ! inode
  | True ->
    is_nfs inode ! inode
    | True ->
      let sb = get_sb inode ! inode
      and (ex, sb) = spdir_lock (ex, sb)
      and dir_hash = get_dir_hash inode ! inode
      and _ = hlist_del_init_ac dir_hash
      and ex = spdir_unlock (ex, sb)
      in (ex, inode)
    | False -> (ex, inode)
  | False -> (ex, inode)

-- handling overflow - need some error handling here
incr_version: VfsInode -> VfsInode
incr_version inode =
  let version = get_version inode ! inode
  in set_version (inode, version + 1)

setup_inode: (VfsInode, VfsDentry, Time) -> (VfsInode, VfsDentry)
setup_inode (inode, dentry, ts) = -- check if order of when increasing i_version matters
  let inode = incr_version inode
  and inode = set_time (inode, ts)
  and (inode, dentry) = d_instantiate_ac (inode, dentry)
  in (inode, dentry)

fat_build_inode_cog: (ExState, Superblock, SlotInfo) -> RR (ExState, Superblock) VfsInode ErrPtr
fat_build_inode_cog (ex, sb, sinfo) =
  let _ = brelse_ac sinfo.bh
  and i_pos = sinfo.i_pos
  and de = sinfo.de
  and (ex, sb) = flock_buildinode (ex, sb)
  and (sb, res) = fat_iget_ac (sb, i_pos)
  in res
  | Success () ->
    let (sb, res) = new_inode_ac sb
    in res
    | Success inode ->
      let (inode, sb) = set_ino (inode, sb) -- check this
      and inode = set_version (inode, 1)
      in fat_fill_inode_ac (inode, de)
      | Success inode ->
        let (ex, inode) = fat_attach_cog (ex, inode, i_pos) -- check if just read!!
        and inode = insert_inode_hash_ac inode
        and (ex, sb) = funlock_buildinode (ex, sb)
        in is_err inode -- read only, fix return type
        | Success inode -> ((ex, sb), Success inode)
        | Error err_ptr -> ((ex, sb), Error err_ptr)
      | Error (inode, err_ptr) ->
        let _ = iput_ac inode -- check what this does
        and (ex, sb) = funlock_buildinode (ex, sb)
        in ((ex, sb), Error err_ptr)
    | Error err_ptr ->
      let (ex, sb) = funlock_buildinode (ex, sb)
      in ((ex, sb), Error err_ptr)
  | Error err_ptr ->
    let (ex, sb) = funlock_buildinode (ex, sb)
    in ((ex, sb), Error err_ptr)

fat_sync_inode_cog: VfsInode -> VfsInode
fat_sync_inode_cog inode =
  deep_fat_write_inode_ac (inode, 1)

vfat_add_entry_cog: (VfsInode, U64, U32, U32, Time) -> RR VfsInode SlotInfo ErrPtr
vfat_add_entry_cog (dir, qname, is_dir, cluster, ts) =
  vfat_striptail_len_cog qname -- read-only - keep in mind for later
  | Success len ->
    let (dir, res) = vfat_build_slots_ac (dir, qname, len, is_dir, cluster, ts)
    in res
    | Success (slots, nr_slots) ->
      let (dir, res) = fat_add_entries_ac (dir, slots, nr_slots)
      in res
      | Success sinfo ->
        let dir = set_time (dir, ts)
        in is_dirsync_ac dir ! dir
        | True ->
          let dir = fat_sync_inode_cog dir
          in (dir, Success sinfo)
        | False ->
          let dir = mark_inode_dirty_ac dir
          in (dir, Success sinfo)
      | Error err_ptr -> (dir, Error err_ptr)
    | Error err_ptr -> (dir, Error err_ptr)
  | Error err_ptr -> (dir, Error err_ptr)

vfat_create_cog: (ExState, VfsInode, VfsDentry) -> RR (ExState, VfsInode, VfsDentry) VfsInode ErrPtr
vfat_create_cog (ex, inode, dentry) =
  let sb = get_sb inode ! inode
  and (ex, sb) = slock (ex, sb)
  and (ex, ts) = get_current_time ex
  and name = get_name dentry ! dentry
  and (inode, res) = vfat_add_entry_cog (inode, name, 0, 0, ts)
  in res
  | Success sinfo ->
    let old_inode = incr_version inode
    and ((ex, sb), res) = fat_build_inode_cog (ex, sb, sinfo)
    in res
    | Success inode ->
      let (inode, dentry) = setup_inode (inode, dentry, ts)
      and ex = ulock (ex, sb)
      in ((ex, old_inode, dentry), Success inode)
    | Error err_ptr ->
      let ex = ulock (ex, sb)
      in ((ex, old_inode, dentry), Error err_ptr)
  | Error err ->
    let ex = ulock (ex, sb)
    in ((ex, inode, dentry), Error err)

-- vfat_lookup
vfat_find_cog: (VfsInode, U64) ->  RR VfsInode SlotInfo ErrPtr
vfat_find_cog (inode, name) =
  vfat_striptail_len_cog name
  | Success len -> fat_search_long_ac (inode, name, len)
  | Error err_ptr -> (inode, Error err_ptr)

vfat_d_anon_disconn_cog: VfsDentry! -> Bool
vfat_d_anon_disconn_cog dentry =
  is_root_den dentry
  | True ->
    is_disconnected dentry ! dentry -- why do you have to bang dentry here
    | True -> True
    | False -> False
  | False -> False

-- fix this to trail the 'and' better
alias_cond: (VfsInode, VfsDentry!) -> R (VfsInode, VfsDentry) (VfsInode, VfsDentry)
alias_cond (inode, dentry) =
  let (inode, alias) = d_find_alias_ac inode -- check if read only
  in is_null [VfsDentry] alias ! alias
  | True -> Error (inode, alias)
  | False ->
    let alias_parent = get_parent alias ! alias
    and dentry_parent = get_parent dentry ! dentry
    in is_equal_den (alias_parent, dentry_parent) -- check if testing equality like this correct
    | True ->
      vfat_d_anon_disconn_cog alias ! alias -- check if read only
      | True -> Error (inode, alias)
      | False -> Success (inode, alias)
    | False -> Error (inode, alias)

-- check correctness
vfat_lookup_cog: (ExState, VfsInode, VfsDentry) -> RR (ExState, VfsInode, VfsDentry) (Option VfsDentry) ErrPtr
vfat_lookup_cog (ex, dir, dentry) =
  let sb = get_sb dir ! dir
  and (ex, sb) = slock (ex, sb)
  and name = get_name dentry ! dentry
  and (dir, res) = vfat_find_cog (dir, name) -- pretty sure this reads
  in res
  | Success sinfo ->
    let ((ex, sb), res) = fat_build_inode_cog (ex, sb, sinfo)
    in res -- check if error correct
    | Success inode ->
      alias_cond (inode, dentry) ! dentry
      | Success (inode, alias) ->
        let alias = d_unhashed_ac alias
        in is_dir_ac inode ! inode
        | True ->
          let _ = iput_ac inode
          and ex = ulock (ex, sb)
          in ((ex, dir, dentry), Success (Some alias))
        | False ->
          --d_move_ac (alias, dentry) ; iput_ac (inode) ; ulock(sb) ; Success alias
          let (alias, dentry) = d_move_ac (alias, dentry) -- alias is a dentry
          and _ = iput_ac inode
          and ex = ulock (ex, sb)
          in ((ex, dir, dentry), Success (Some alias)) -- check the logic here
      | Error (inode, alias) ->
        -- dput_ac (alias) ; ulock(sb) ; is_null [VfsInode] inode ! inode
        let _ = dput_ac alias
        and ex = ulock (ex, sb)
        in is_null [VfsInode] inode ! inode
        | True ->
          let version = get_version dir ! dir
          and dentry = set_d_time (dentry, version) -- see if you can swap lines
          and dentry = d_splice_alias_ac (inode, dentry)
          in ((ex, dir, dentry), Success (None ()))
        | False ->
          let dentry = d_splice_alias_ac (inode, dentry)
          in ((ex, dir, dentry), Success (None ()))
    | Error err_ptr ->
      let ex = ulock (ex, sb)
      in ((ex, dir, dentry), Error err_ptr)
  | Error err_ptr ->
    is_noent err_ptr
    | Success () ->
      let ex = ulock (ex, sb)
      and version = get_version dir ! dir
      and dentry = set_d_time (dentry, version)
      and null_inode = get_null_inode_ac ()
      and dentry = d_splice_alias_ac (null_inode, dentry)
      in ((ex, dir, dentry), Success (None ()))
    | Error err_ptr ->
      let ex = ulock (ex, sb)
      in ((ex, dir, dentry), Error err_ptr)

vfat_unlink_cog: (ExState, VfsInode, VfsDentry) -> RR (ExState, VfsInode, VfsDentry) VfsInode ErrPtr
vfat_unlink_cog (ex, dir, dentry) =
  let sb = get_sb dir ! dir
  and version = get_version dir ! dir
  and (ex, sb) = slock (ex, sb)
  and name = get_name (dentry) ! dentry
  and (dir, res) = vfat_find_cog (dir, name)
  in res
  | Success sinfo ->
    let ((ex, dir), res) = fat_remove_entries_cog (ex, dir, sinfo)
    in res
    | Success () ->
      let inode = d_inode_ac dentry ! dentry
      and inode = clear_nlink_ac inode
      and inode = update_am_time inode
      and (ex, inode) = fat_detach_cog (ex, inode) -- double check this line
      and dentry = set_d_time (dentry, version)
      and ex = ulock (ex, sb)
      in ((ex, dir, dentry), Success inode)
    | Error err_ptr ->
      let ex = ulock (ex, sb)
      in ((ex, dir, dentry), Error err_ptr)
  | Error err_ptr ->
    let ex = ulock (ex, sb)
    in ((ex, dir, dentry), Error err_ptr)

-- vfat_mkdir
-- should return VfsInode -- fix this up
vfat_mkdir_cog: (ExState, VfsInode, VfsDentry) -> RR (ExState, VfsInode, VfsDentry) VfsInode ErrPtr
vfat_mkdir_cog (ex, dir, dentry) =
  let sb = get_sb dir ! dir
  and (ex, ts) = get_current_time ex
  and name = get_name dentry ! dentry
  and (dir, res) = fat_alloc_new_dir_ac (dir, ts)
  in res
  | Success cluster ->
    let (dir, res) = vfat_add_entry_cog (dir, name, 1, cluster, ts)
    in res
    | Success sinfo ->
      let dir = incr_version dir
      and dir = inc_nlink_ac dir
      and ((ex, sb), res) = fat_build_inode_cog (ex, sb, sinfo)
      in res
      | Success inode ->
      -- replace with setup inode if possible
        let inode = incr_version inode
        and inode = set_nlink_ac (inode, 2) -- if this can be rearranged to be either before or after then do so
        and inode = set_time (inode, ts)
        and (inode, dentry) = d_instantiate_ac (inode, dentry)
        and ex = ulock (ex, sb)
        in ((ex, dir, dentry), Success inode)
      | Error err_ptr ->
        let ex = ulock (ex, sb)
        in ((ex, dir, dentry), Error err_ptr)
    | Error err_ptr ->
      let dir = fat_free_clusters_ac (dir, cluster)
      and ex = ulock (ex, sb)
      in ((ex, dir, dentry), Error err_ptr)
  | Error err_ptr ->
    let ex = ulock (ex, sb)
    in ((ex, dir, dentry), Error err_ptr)

-- vfat_rmdir
-- There was an error ONE time early on using this. Not sure how to recreate. Need to check.
vfat_rmdir_cog: (ExState, VfsInode, VfsDentry) -> RR (ExState, VfsInode, VfsDentry) VfsInode ErrPtr
vfat_rmdir_cog (ex, dir, dentry) =
  let inode = d_inode_ac dentry ! dentry
  and sb = get_sb dir ! dir
  and name = get_name dentry ! dentry
  and (ex, sb) = slock (ex, sb)
  in fat_dir_empty_ac inode -- check if read only
  | Success () ->
    let (dir, res) = vfat_find_cog (dir, name)
    in res
    | Success sinfo ->
      let ((ex, dir), res) = fat_remove_entries_cog (ex, dir, sinfo)
      in res
      | Success () ->
        let version = get_version dir ! dir
        and dir = drop_nlink_ac dir
        and inode = d_inode_ac dentry ! dentry
        and inode = clear_nlink_ac inode
        and inode = update_am_time inode
        and (ex, inode) = fat_detach_cog (ex, inode) -- double check
        and dentry = set_d_time (dentry, version)
        and ex = ulock (ex, sb)
        in ((ex, dir, dentry), Success inode)
      | Error err_ptr ->
        let ex = ulock (ex, sb)
        in ((ex, dir, dentry), Error err_ptr)
    | Error err_ptr ->
      let ex = ulock (ex, sb)
      in ((ex, dir, dentry), Error err_ptr)
  | Error err_ptr ->
    let ex = ulock (ex, sb)
    in ((ex, dir, dentry), Error err_ptr)


-- === IN PROGRESS === --

-- deep_fat_remove_entries_cog to replace deep_fat_remove_entries_ac
-- So far kernel crash @ a call to mark_buffer_dirty_inode

{-
get_endpoint_ac: (Superblock!, U64) -> U64
ptr_grq_ac: (U64, U64) -> Bool
slot_offset: (U32, U32, U64) -> U64
delete_first_plus: U64 -> U64
fat_get_entry_ac: (VfsInode, U64, U64, U64) -> R (VfsInode, U64, U64, U64) (VfsInode, ErrPtr)

fix_de_gen: (#{acc: (U32, U64), obsv: U64}) -> GeneratorResult (U32, U64) () (U32, U64) (U32, U64)
fix_de_gen (#{acc = (nr_slots, de), obsv = endp}) =
  let is_grq = ptr_grq_ac (endp, de)
  in (nr_slots > 0 && is_grq)
  | True -> ((nr_slots, de), Yield (nr_slots, de))
  | False -> ((nr_slots, de), Stop (nr_slots, de))

fix_de_cons: (#{obj: (U32, U64), acc: (U32, U64), obsv: U64}) -> ConsumerResult () (U32, U64) (U32, U64)
fix_de_cons (#{obj = (nr_slots, de), acc = _, obsv = endp}) =
  let de = delete_first_plus de -- FIX THIS NAME
  and nr_slots = decrementU32 nr_slots
  in ((nr_slots, de), Next())

fix_de: (U32, U64, U64) -> (U32, U64)
fix_de (nr_slots, de, endp) =
  let iter = iterate [(U32, U64), (), (U32, U64), (U32, U64), U64]
  and ((nr_slots, de), _) = iter (#{
    gen = fix_de_gen,
    cons = fix_de_cons,
    acc = (nr_slots, de),
    obsv = endp
  })
  in (nr_slots, de)

--fix_de: (U32, U64, U64, U64) -> (U32, U64)

-- THIS ACTUALLY AFFECTS VERYTHING!!!! FIX THIS UP all ptrs may be changed
deep_fremove_gen: (#{acc: (U32, VfsInode, U64, U64, U64), obsv : Superblock!}) -> GeneratorResult (U64, U64, U64) (ErrPtr) () (U32, VfsInode, U64, U64, U64)
deep_fremove_gen (#{acc = (nr_slots, dir, de, bh, pos), obsv = sb}) = -- dont need bh here?
  (nr_slots /= 0)
  | True ->
    fat_get_entry_ac (dir, pos, bh, de) -- bh is null
    | Success (dir, pos, bh, de) ->
      ((nr_slots, dir, de, bh, pos), Yield (pos, bh, de))
    | Error (dir, errptr) ->
      ((nr_slots, dir, de, bh, pos), Return errptr)
  | False -> ((nr_slots, dir, de, bh, pos), Stop ())

deep_fremove_cons: (#{obj: (U64, U64, U64), acc: (U32, VfsInode, U64, U64, U64), obsv: Superblock!}) -> ConsumerResult (ErrPtr) () (U32, VfsInode, U64, U64, U64)
deep_fremove_cons (#{obj = (pos, de, bh), acc = (nr_slots, dir, _, _, _), obsv = sb}) =
  let orig_slots = nr_slots
  and endp = get_endpoint_ac (sb, bh)
  and (nr_slots, de) = fix_de (nr_slots, de, endp) -- name?
  and (dir, bh) = mark_buffer_dirty_inode_ac (dir, bh)
  in is_dirsync_ac (dir) ! dir
  | True ->
    let (bh, res) = sync_dirty_buffer_ac bh
    and bh = brelse_ac bh
    in res
    | Success () ->
      let curr_change = slot_offset (orig_slots, nr_slots, de)
      and pos = pos + curr_change
      in ((nr_slots, dir, de, bh, pos), Next ())
    | Error errptr ->
      ((nr_slots, dir, de, bh, pos), Return (errptr))
  | False ->
    let bh = brelse_ac bh
    and curr_change = slot_offset (orig_slots, nr_slots, de)
    and pos = pos + curr_change
    in ((nr_slots, dir, de, bh, pos), Next ())

deep_fat_remove_entries_cog: (VfsInode, U64, U32) -> R VfsInode VfsInode -- change later
deep_fat_remove_entries_cog (dir, pos, nr_slots) =
  let sb = get_sb dir ! dir
  and (bh, de) = (0, 0) -- check
  and iter = iterate [(U64, U64, U64), (ErrPtr), (), (U32, VfsInode, U64, U64, U64), Superblock]
  and ((_, inode, _, _, _), res) = iter (#{
    gen = deep_fremove_gen,
    cons = deep_fremove_cons,
    acc = (nr_slots, dir, de, bh, pos),
    obsv = sb
  })
  in res
  | Stop () -> Success inode
  | Return (errptr) -> Error inode -- check if all errors handled (in the calling function)

-}

-- fat_fill_inode_cog to replace fat_fill_inode_ac
{-
fat_fill_inode_cog: (VfsInode, U64) -> R VfsInode (VfsInode, ErrPtr)
fat_fill_inode_cog (inode, de) =
  let sbi = get_sbinfo inode
  and inode = set_ipos (inode, 0)
  and set_init_uid (inode, sbi)
  and set_init_gid (inode, sbi)
  and inode = incr_version (inode)
  and inode = set_init_gen inode
  in fat_fill_dir (inode, de)
  | Success (inode, de) -> -- check if read only for de
    let inode = fat_fill_sys (inode)
    and inode = fat_save_attrs_ac (inode, de)
    and set_init_blocks (inode, sbi)
    and set_init_time ()
  | Error err_ptr -> Error err_ptr
-}

-- add this in later to make remove_entries cleaner
{-
clean_entry_cog: (VfsInode, U64, U32, U64) -> R () ()
clean_entry_cog (inode, slot_off, nr_slots, sb) =
  deep_fat_remove_entries_ac (inode, slot_off, nr_slots)
  | Success () -> Success ()
  | Error err_ptr ->
    let _ = fat_msg_ac (sb)
    in Error ()
-}

-- old is_root_den implementation
--is_root: VfsDentry! -> Bool
--is_root dentry =
--  let parent = get_parent dentry
--  in (dentry == parent)
