-- Copyright 2018, Data61
-- Commonwealth Scientific and Industrial Research Organisation (CSIRO)
-- ABN 41 687 119 230.
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(DATA61_GPL)

-- Included something, because the cogent compiler doesn't support an empty
-- cogent source file.
include <gum/common/common.cogent>

-- These are abstract types
type U64StatsSyncAbstractType
type NetAbstractType
type NetDeviceAbstractType

-- CPU stats
type PCPULStats = {
  packets : U64,
  bytes   : U64,
  syncp   : #U64StatsSyncAbstractType
}

-- ethtool_ts_info time stamping flags
-- defined here: https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/net_tstamp.h#L19

flag_SOF_TIMESTAMPING_TX_SOFTWARE : U32
flag_SOF_TIMESTAMPING_TX_SOFTWARE = 1 << 1

flag_SOF_TIMESTAMPING_RX_SOFTWARE : U32
flag_SOF_TIMESTAMPING_RX_SOFTWARE = 1 << 3

flag_SOF_TIMESTAMPING_SOFTWARE : U32
flag_SOF_TIMESTAMPING_SOFTWARE = 1 << 4
--
-- Functions that are implemented in the C files, forward declared here.
--

--
-- Wrappers for linux api
--
alloc_netdev_lo_ac: SysState -> R (SysState, NetDeviceAbstractType) SysState
dev_net_set_ac: (SysState, NetDeviceAbstractType, NetAbstractType) -> (SysState, NetDeviceAbstractType, NetAbstractType)
assign_loopback_dev_in_net_ac: (SysState, NetDeviceAbstractType, NetAbstractType) -> (SysState, NetAbstractType)
register_net_dev_ac: (SysState, NetDeviceAbstractType) -> RR (SysState, NetDeviceAbstractType) () ()
free_netdev_ac: (SysState, NetDeviceAbstractType) -> SysState
netdev_alloc_pcpu_stats_ac: (SysState, NetDeviceAbstractType) -> RR (SysState, NetDeviceAbstractType) () ()
netdev_free_pcpu_stats_ac: (SysState, NetDeviceAbstractType) -> (SysState, NetDeviceAbstractType)

-- cg_loopback_net_init_cg
cg_loopback_net_init_cg: (SysState, NetAbstractType) -> RR (SysState, NetAbstractType) () ()
cg_loopback_net_init_cg (st, net) =
  --let (st, dev) = alloc_netdev_lo_ac st
  alloc_netdev_lo_ac st
  | Success (st, dev) ->
     let (st, dev, net) = dev_net_set_ac (st, dev, net)
     and ((st, dev), result) = register_net_dev_ac (st, dev)
     in result
     | Success () ->
        let (st, net) = assign_loopback_dev_in_net_ac (st, dev, net)
        in ((st, net), Success ())
     | Error () -> ((free_netdev_ac (st, dev), net), Error ())
  | Error st -> ((st, net), Error ())

-- cg_loopback_dev_init_cg:
cg_loopback_dev_init_cg: (SysState, NetDeviceAbstractType) -> RR (SysState, NetDeviceAbstractType) () ()
cg_loopback_dev_init_cg (st, dev) =
  netdev_alloc_pcpu_stats_ac (st, dev)

-- cg_loopback_dev_free_cg:
cg_loopback_dev_free_cg: (SysState, NetDeviceAbstractType) -> (SysState, NetDeviceAbstractType)
cg_loopback_dev_free_cg (st, dev) =
  netdev_free_pcpu_stats_ac (st, dev)

-- cg_always_on_cg
cg_always_on_cg: NetDeviceAbstractType! -> (NetDeviceAbstractType!, U32)
cg_always_on_cg dev =
  let always_on : U32 = 1
  in (dev, always_on)

-- get_ts_info_timestamp_flags_cg
get_ts_info_timestamp_flags_cg: () -> U32
get_ts_info_timestamp_flags_cg () =
  let flags : U32 = flag_SOF_TIMESTAMPING_TX_SOFTWARE .|. flag_SOF_TIMESTAMPING_RX_SOFTWARE .|. flag_SOF_TIMESTAMPING_SOFTWARE
  in flags

set_fields_in_pcpu_lstats: (U64, U64, #U64StatsSyncAbstractType, PCPULStats) -> PCPULStats
set_fields_in_pcpu_lstats (packets, bytes, syncp, pcpulstats) =
  let pcpulstats = pcpulstats { packets, bytes, syncp }
  in pcpulstats
